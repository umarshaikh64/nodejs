{"version":3,"file":"json.js","sourceRoot":"","sources":["json.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/2/3/003.\n */\n\nimport { crlf, LF } from 'crlf-normalize';\nimport { deepmergeOptions } from './lib/const';\nimport deepmerge from 'deepmerge-plus';\nimport moment from 'moment';\nimport { stringify as MdconfStringify } from './index';\nimport { array_unique } from 'array-hyper-unique';\nimport { sortKeys, chkInfo } from './lib/util';\nimport { IOptionsParse, IMdconfMeta } from './lib/types';\n\nexport module JsonMd\n{\n\texport interface IOptions\n\t{\n\t\ttags?: string[],\n\t\tcontribute?: string[],\n\t}\n\n\texport interface IJsonmdData_v1 extends IOptions\n\t{\n\t\tdata?: {\n\t\t\tcover_pic?: string,\n\t\t\tdesc?: string,\n\t\t\tauthor?: string,\n\t\t\tg_lnovel_name?: string\n\t\t\ttype?: string[],\n\t\t\tlastupdate?: string,\n\t\t},\n\n\t\tnovel_date?,\n\t\tnovel_title?: string,\n\t\tnovel_author?: string,\n\t\turl?: string,\n\t\tnovel_publisher?: string,\n\t\tnovel_cover?: string,\n\t\tnovel_status?: string,\n\n\t\tnovel_series_title?: string,\n\n\t\tnovel_desc?: string,\n\n\t\t[key: string]: any,\n\t}\n\n\texport function stringify(json_data: IJsonmdData_v1, options?: IMdconfMeta & IOptions): string\n\texport function stringify(json_data: IMdconfMeta, options?: IMdconfMeta & IOptions): string\n\texport function stringify(json_data: Partial<IJsonmdData_v1 & IMdconfMeta & IOptions>,\n\t\toptions?: IMdconfMeta & IOptions,\n\t): string\n\texport function stringify(json_data, options: IMdconfMeta & IOptions = {}): string\n\t{\n\t\tlet data = {\n\t\t\ttags: [],\n\t\t\tcontribute: [],\n\t\t} as Partial<IMdconfMeta & IJsonmdData_v1 & IOptions>;\n\n\t\t{\n\t\t\tdata = deepmerge.all([data, json_data, data, options], deepmergeOptions);\n\t\t\tdata.data = data.data || {};\n\n\t\t\tif (json_data.novel_date)\n\t\t\t{\n\t\t\t\tdata.novel_date = json_data.novel_date;\n\t\t\t}\n\t\t}\n\n\t\tif (options.tags)\n\t\t{\n\t\t\tdata.tags = data.tags.concat(options.tags);\n\t\t}\n\t\tif (data.data.type)\n\t\t{\n\t\t\tdata.tags = data.tags.concat(data.data.type);\n\t\t}\n\n\t\tdata.tags.push('node-novel');\n\n\t\tif (options.contribute)\n\t\t{\n\t\t\tdata.contribute = data.contribute.concat(options.contribute);\n\t\t}\n\n\t\tdata.tags = array_unique(data.tags);\n\t\tdata.contribute = array_unique(data.contribute);\n\n\t\tdata.tags.sort();\n\n\t\tif (data.novel_date && typeof data.novel_date !== 'string')\n\t\t{\n\t\t\tif (moment.isMoment(data.novel_date) || data.novel_date.format)\n\t\t\t{\n\t\t\t\tdata.novel_date = data.novel_date.format();\n\t\t\t}\n\t\t\telse if (data.novel_date.toJSON)\n\t\t\t{\n\t\t\t\tdata.novel_date = data.novel_date.toJSON();\n\t\t\t}\n\t\t\telse if (data.novel_date._a)\n\t\t\t{\n\t\t\t\tdata.novel_date = moment(data.novel_date._a).local().format();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdata.novel_date = data.novel_date.toString();\n\t\t\t}\n\t\t}\n\n\t\tdata = sortKeys(data);\n\n\t\tlet md = `\\n# novel\n\n- title: ${data.novel_title || data.data.g_lnovel_name}\n- author: ${data.novel_author || data.data.author}\n- source: ${data.url || ''}\n- publisher: ${data.novel_publisher || ''}\n- cover: ${data.novel_cover || data.data.cover_pic || ''}\n- date: ${data.novel_date || ''}\n- status: ${data.novel_status || ''}\n`;\n\n\t\tmd += MdconfStringify(data.novel, 2, [\n\t\t\t'title',\n\t\t\t'author',\n\t\t\t'source',\n\t\t\t'publisher',\n\t\t\t'cover',\n\t\t\t'date',\n\t\t\t'status',\n\t\t\t'preface',\n\t\t\t'tags',\n\t\t]);\n\n\t\tmd += `\\n## preface\n\n\\`\\`\\`\n${(data.novel_desc || data.data.desc || '').replace(/\\`/g, '\\\\`')}\n\\`\\`\\`\n\n## tags\n\n- ${data.tags.join(\"\\n- \")}\n`;\n\n\t\tmd += `\\n# contribute\n\n- ${data.contribute.join(\"\\n- \")}\n`;\n\n\t\tif (data.options)\n\t\t{\n\t\t\tmd += `\\n# options\\n`;\n\n\t\t\tmd += MdconfStringify(data.options, 2);\n\t\t}\n\n\t\treturn LF + md.replace(/^\\n+|\\s+$/g, '') + LF;\n\t}\n\n\texport function toNovelInfo(initData: Partial<IMdconfMeta>,\n\t\tinputData: Partial<IJsonmdData_v1 & IMdconfMeta & IOptions>,\n\t\t...argv: Partial<IJsonmdData_v1 & IMdconfMeta & IOptions>[]\n\t): IMdconfMeta\n\t{\n\t\tlet ret: IMdconfMeta;\n\n\t\tlet data = deepmerge.all([\n\t\t\t{},\n\t\t\tinputData || {},\n\t\t\t...argv,\n\t\t], deepmergeOptions);\n\n\t\tlet ls: Partial<IJsonmdData_v1 & IMdconfMeta & IOptions>[] = [\n\t\t\t{\n\t\t\t\tnovel: {\n\t\t\t\t\ttags: [],\n\t\t\t\t\tseries: {\n\t\t\t\t\t\tname: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tcontribute: [],\n\t\t\t\toptions: {},\n\t\t\t},\n\t\t\tinitData || {},\n\t\t\t{\n\t\t\t\tnovel: data.novel,\n\t\t\t\tcontribute: data.contribute,\n\t\t\t\toptions: data.options,\n\t\t\t},\n\t\t\t{\n\t\t\t\tnovel: {\n\t\t\t\t\ttitle: data.novel_title,\n\t\t\t\t\tauthor: data.novel_author,\n\t\t\t\t\tdate: data.novel_date,\n\t\t\t\t\tpreface: data.novel_desc,\n\t\t\t\t\tstatus: data.novel_status,\n\t\t\t\t\tpublisher: data.novel_publisher,\n\t\t\t\t\tcover: data.novel_cover,\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tsource: data.url && data.url.href ? data.url.href : data.url,\n\n\t\t\t\t\ttags: data.tags,\n\n\t\t\t\t\tseries: {\n\t\t\t\t\t\tname: data.novel_series_title || '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tnovel: {\n\t\t\t\t\tsource: data.url && (typeof data.url == 'string' ?\n\t\t\t\t\t\t\tdata.url\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t: data.url.href\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tnovel: {\n\t\t\t\t\tsource: data.url_data && (typeof data.url_data.url == 'string' ? data.url_data.url : data.url_data.url.href),\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\t//console.log(data);\n\n\t\tif (data.data)\n\t\t{\n\t\t\tls.push({\n\t\t\t\tnovel: {\n\t\t\t\t\ttitle: data.data.g_lnovel_name,\n\t\t\t\t\tauthor: data.data.author,\n\t\t\t\t\tcover: data.data.cover_pic,\n\n\t\t\t\t\ttags: data.data.type,\n\n\t\t\t\t\tpreface: data.data.desc,\n\n\t\t\t\t\tdate: data.data.lastupdate,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\tret = deepmerge.all([\n\t\t\t...ls,\n\t\t\t{\n\t\t\t\tnovel: {\n\t\t\t\t\ttitle: '',\n\t\t\t\t\tauthor: '',\n\t\t\t\t\tdate: '',\n\t\t\t\t\tpreface: '',\n\t\t\t\t\tstatus: '',\n\t\t\t\t\tpublisher: '',\n\t\t\t\t\tcover: '',\n\t\t\t\t\tsource: '',\n\n\t\t\t\t\t//tags: [],\n\t\t\t\t},\n\t\t\t\t//contribute: [],\n\t\t\t\t//options: {},\n\t\t\t},\n\t\t], Object.assign({\n\t\t\tkeyValueOrMode: true,\n\t\t\t// @ts-ignore\n\t\t}, deepmergeOptions) as deepmerge.Options);\n\n\t\tchkInfo(ret);\n\n\t\tif (ret.novel.source)\n\t\t{\n\t\t\t[\n\t\t\t\t/(wenku8)/,\n\t\t\t\t/(dmzj)/,\n\t\t\t\t/(dmzj)/,\n\t\t\t\t/(novel18)?\\.(syosetu)/,\n\t\t\t\t/(alphapolis)/,\n\t\t\t].forEach(function (r)\n\t\t\t{\n\t\t\t\tlet m;\n\t\t\t\tif (m = r.exec(ret.novel.source))\n\t\t\t\t{\n\t\t\t\t\tret.novel.tags = ret.novel.tags.concat(m.slice(1));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tret = sortKeys(ret);\n\t\tret.novel.tags.unshift('node-novel');\n\t\tret.novel.tags = array_unique(ret.novel.tags);\n\n\t\treturn ret;\n\t}\n\n}\n\nexport default JsonMd;\n"]}