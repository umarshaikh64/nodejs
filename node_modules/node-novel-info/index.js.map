{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/1/27/027.\n */\n\nimport { deepmergeOptions } from './lib/const';\nimport { parse as _parse, stringify as _stringify, RawObject, mdconf } from 'mdconf2';\nimport { crlf, LF } from 'crlf-normalize';\nimport deepmerge from 'deepmerge-plus';\nimport { array_unique } from 'array-hyper-unique';\nimport JsonMd from './json';\nimport { envVal, envBool } from 'env-bool';\nimport { toHex } from 'hex-lib';\nimport { expect } from 'chai';\nimport { chkInfo, sortKeys, isHexValue } from './lib/util';\nimport { IOptionsParse, IMdconfMeta } from './lib/types';\n\nexport * from './lib/util';\nexport * from './lib/types';\nexport { IMdconfMeta, IOptionsParse } from './lib/types';\nexport * from './version';\n\nexport { mdconf }\nexport { deepmergeOptions }\nexport { envVal, envBool }\n\nexport const defaultOptionsParse: IOptionsParse = {\n\tremoveRawData: true,\n\tdisableKeyToLowerCase: true,\n};\n\nexport function stringify(data, d2?, ...argv): string\n{\n\tdata = _handleDataForStringify(data, d2, ...argv);\n\n\treturn _stringify(data) + LF.repeat(2);\n}\n\nexport function parse<T = IMdconfMeta>(data: {\n\ttoString(): string,\n}, options?: IOptionsParse): T\nexport function parse<T = IMdconfMeta>(data: string, options?: IOptionsParse): T\nexport function parse<T extends IMdconfMeta>(data, options: IOptionsParse = {}): T\n{\n\tif (options.removeRawData)\n\t{\n\t\toptions.oldParseApi = options.removeRawData;\n\t}\n\n\tif (options.disableKeyToLowerCase == null)\n\t{\n\t\toptions.disableKeyToLowerCase = true;\n\t}\n\n\tlet ret = _parse(crlf(data.toString()), options) as IMdconfMeta;\n\n\ttry\n\t{\n\t\tif (ret.novel?.preface)\n\t\t{\n\t\t\tret.novel.preface = (Array.isArray(ret.novel.preface)) ? ret.novel.preface.join(LF) : ret.novel.preface\n\t\t\t;\n\t\t}\n\n\t\tif (!options.lowCheckLevel || ret.options)\n\t\t{\n\t\t\tret.options = deepmerge(ret.options || {}, {\n\n\t\t\t\ttextlayout: {},\n\n\t\t\t}, deepmergeOptions);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tconsole.error(e.toString());\n\t}\n\n\tif (options.chk || options.chk == null)\n\t{\n\t\tret = chkInfo(ret, options);\n\t}\n\n\tif (options.throw || options.throw == null)\n\t{\n\t\tret = chkInfo(ret, {\n\t\t\t...options,\n\t\t\tthrow: true,\n\t\t});\n\n\t\tif (!ret)\n\t\t{\n\t\t\tthrow new Error('not a valid node-novel-info mdconf');\n\t\t}\n\t}\n\n\tif (ret)\n\t{\n\t\tret = sortKeys(ret);\n\n\t\t//console.log(777);\n\t}\n\n\t// @ts-ignore\n\treturn ret;\n}\n\nexport function _handleData<T extends IMdconfMeta>(data, d2?, ...argv): T\n{\n\t// @ts-ignore\n\tdata = JsonMd.toNovelInfo(data, d2 || {}, {\n\t\tnovel: {\n\t\t\ttags: [],\n\t\t},\n\t}, ...argv);\n\n\tdata = sortKeys(data);\n\tdata.novel.tags.unshift('node-novel');\n\tdata.novel.tags = array_unique(data.novel.tags);\n\n\t// @ts-ignore\n\treturn data;\n}\n\nexport function _handleDataForStringify<T extends IMdconfMeta>(data, d2?, ...argv): T\n{\n\tdata = _handleData(data, d2, ...argv);\n\n\tif (typeof data.novel?.preface == 'string')\n\t{\n\t\tdata.novel.preface = new RawObject(data.novel.preface, {} as any);\n\t}\n\n\tif ('novel_status' in data.novel && !isHexValue(data.novel.novel_status))\n\t{\n\t\texpect(data.novel.novel_status).a('number');\n\n\t\tdata.novel.novel_status = toHex(data.novel.novel_status, 4);\n\t}\n\n\t// @ts-ignore\n\treturn data;\n}\n\nexport const mdconf_parse = parse;\n\nexport default exports as typeof import('./index');\n"]}