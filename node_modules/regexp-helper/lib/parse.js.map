{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;;AAEH,oEAAoE;AAQpE,SAAgB,4BAA4B,CAAC,GAAW,EAAE,UAItD,EAAE;IAEL,IAAI,CAAC,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpD,IAAI,CAAC,EACL;QACC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAErB,OAAO;YACN,MAAM,EAAE,OAAO,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACzC,KAAK,EAAE,OAAO,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACxC,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,GAAG;SACV,CAAC;KACF;SACI,IAAI,OAAO,CAAC,UAAU,EAC3B;QACC,MAAM,IAAI,SAAS,CAAC,GAAG,GAAG,0BAA0B,CAAC,CAAC;KACtD;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAxBD,oEAwBC;AAED,SAAgB,wBAAwB,CAAC,UAGrC,EAAE;IAEL,OAAO,IAAI,MAAM,CAAC,KAAK,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,cAAc,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,wBAAO,CAAC,WAAW,MAAM,CAAC,CAAC;AAC1J,CAAC;AAND,4DAMC;AAED,kBAAe,4BAA4B,CAAC","sourcesContent":["/**\n * Created by user on 2018/5/3/003.\n */\n\nimport support, { hasSupportFlag, FlagsName } from 'regexp-support';\n\nexport type IOptions = {\n\tallowNonNativeSlash?: boolean,\n\tallowNonNativeFlags?: boolean,\n\tthrowError?: boolean,\n}\n\nexport function parseRegularExpressionString(str: string, options: {\n\tallowNonNativeSlash?: boolean,\n\tallowNonNativeFlags?: boolean,\n\tthrowError?: boolean,\n} = {})\n{\n\tlet m = rRegularExpressionString(options).exec(str);\n\tif (m)\n\t{\n\t\tlet [s, d, r, f] = m;\n\n\t\treturn {\n\t\t\tsource: typeof r !== 'undefined' ? r : '',\n\t\t\tflags: typeof f !== 'undefined' ? f : '',\n\t\t\tslash: d,\n\t\t\tinput: str,\n\t\t};\n\t}\n\telse if (options.throwError)\n\t{\n\t\tthrow new TypeError(`${str} not a regex like string`);\n\t}\n\n\treturn null;\n}\n\nexport function rRegularExpressionString(options: {\n\tallowNonNativeSlash?: boolean,\n\tallowNonNativeFlags?: boolean,\n} = {})\n{\n\treturn new RegExp(`^(${options.allowNonNativeSlash ? '[\\\\/#$%]' : '\\\\/'})(..*)\\\\1([${options.allowNonNativeFlags ? 'a-zA-Z' : support.nativeFlags}]*)$`);\n}\n\nexport default parseRegularExpressionString;\n"]}