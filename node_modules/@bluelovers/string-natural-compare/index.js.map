{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;;AAEH,oFAAqD;AAmBrD;;;;;;GAMG;AACH,SAAgB,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,IAA6B;IAEjE,IAAI,CAAS,CAAC;IAEd,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAClD;QACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;KACT;SAED;QACC,IAAI,OAAO,CAAC,KAAK,QAAQ,EACzB;YACC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACd;aACI,IAAI,OAAO,CAAC,KAAK,QAAQ,EAC9B;YACC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SACd;QAED,IAAI,CAAC,KAAK,CAAC,EACX;YACC,OAAO,CAAC,CAAA;SACR;QAED,CAAC,GAAG,gCAAe,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA;KAC/B;IAED,IAAI,CAAC,KAAK,CAAC,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,CAAA,EACzB;QACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACV;IAED,OAAO,CAAC,CAAA;AACT,CAAC;AAjCD,wCAiCC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,IAA6B;IAEtD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAA;AAC5C,CAAC;AAHD,8BAGC;AAED;;GAEG;AACU,QAAA,sBAAsB,GAAG,SAAS,CAAC;IAC/C,eAAe,EAAE,IAAI;CACrB,CAAC,CAAA;AAEiC,0BAJtB,8BAAsB,CAIe;AAElD,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;AACrC,cAAc,CAAC,sBAAsB,GAAG,8BAAsB,CAAC;AAC/D,cAAc,CAAC,eAAe,GAAG,8BAAsB,CAAC;AACxD,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC;AAExC,MAAM,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAErE,kBAAe,cAAc,CAAA","sourcesContent":["/**\n * Created by user on 2020/6/4.\n */\n\nimport _naturalCompare from 'string-natural-compare';\n\nexport interface IOptionsStringNaturalCompare\n{\n\t/**\n\t * Set to true to compare strings case-insensitively. Default: false.\n\t */\n\tcaseInsensitive?: boolean,\n\t/**\n\t * A string of characters that define a custom character ordering. Default: undefined.\n\t */\n\talphabet?: string,\n}\n\nexport interface IOptionsNaturalCompare extends IOptionsStringNaturalCompare\n{\n\tdesc?: boolean,\n}\n\n/**\n * Compare alphanumeric strings the same way a human would,\n * using a natural order algorithm\n * (originally known as the alphanum algorithm)\n * where numeric characters are sorted\n * based on their numeric values rather than their ASCII values.\n */\nexport function naturalCompare(a, b, opts?: IOptionsNaturalCompare)\n{\n\tlet i: number;\n\n\tif (typeof a === 'number' && typeof b === 'number')\n\t{\n\t\ti = a - b\n\t}\n\telse\n\t{\n\t\tif (typeof a === 'number')\n\t\t{\n\t\t\ta = String(a);\n\t\t}\n\t\telse if (typeof b === 'number')\n\t\t{\n\t\t\tb = String(b);\n\t\t}\n\n\t\tif (a === b)\n\t\t{\n\t\t\treturn 0\n\t\t}\n\n\t\ti = _naturalCompare(a, b, opts)\n\t}\n\n\tif (i !== 0 && opts?.desc)\n\t{\n\t\ti = 0 - i;\n\t}\n\n\treturn i\n}\n\n/**\n * create compare with preset options\n */\nexport function createNew(opts?: IOptionsNaturalCompare)\n{\n\treturn (a, b) => naturalCompare(a, b, opts)\n}\n\n/**\n * compare strings case-insensitively\n */\nexport const compareCaseInsensitive = createNew({\n\tcaseInsensitive: true,\n})\n\nexport { compareCaseInsensitive as caseInsensitive }\n\nnaturalCompare.createNew = createNew;\nnaturalCompare.compareCaseInsensitive = compareCaseInsensitive;\nnaturalCompare.caseInsensitive = compareCaseInsensitive;\nnaturalCompare.default = naturalCompare;\n\nObject.defineProperty(naturalCompare, \"__esModule\", { value: true });\n\nexport default naturalCompare\n"]}