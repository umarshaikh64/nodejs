{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAIH,SAAgB,MAAM,CAAC,CAAS,EAAE,CAAS,EAAE,EAC5C,CAAC,EACD,MAAM,GACQ;IAEd,IAAI,EAAmB,CAAC;IACxB,IAAI,EAAmB,CAAC;IAExB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACxC;QACC,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9C,IAAI,CAAC,KAAK,CAAC,EACX;YACC,OAAO,CAAC,CAAC;SACT;QAED,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,EAAE,IAAI,EAAE,EACZ;YACC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEV,OAAO,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAC9E;gBACC,CAAC,EAAE,CAAC;aACJ;YAED,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,OAAO,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;KAC5B;AACF,CAAC;AAnCD,wBAmCC;AAED,SAAgB,KAAK,CAAC,KAAa;IAElC,OAAO,KAAK;SACV,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;SAC7B,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;SACzB,IAAI,EAAE,CACN;AACH,CAAC;AAPD,sBAOC","sourcesContent":["/**\n * Created by user on 2020/6/5.\n */\n\nimport { ITriggerData } from './types';\n\nexport function _match(a: string, b: string, {\n\tr,\n\tmainFn,\n}: ITriggerData)\n{\n\tlet ta: RegExpExecArray;\n\tlet tb: RegExpExecArray;\n\n\tif ((ta = r.exec(a)) && (tb = r.exec(b)))\n\t{\n\t\tlet r = parseFloat(ta[0]) - parseFloat(tb[0]);\n\n\t\tif (r !== 0)\n\t\t{\n\t\t\treturn r;\n\t\t}\n\n\t\tlet a1 = ta.input.slice(ta[0].length);\n\t\tlet b1 = tb.input.slice(tb[0].length);\n\n\t\tif (a1 != b1)\n\t\t{\n\t\t\tlet i = 0;\n\n\t\t\twhile (typeof a1[i] != 'undefined' && a1[i] === b1[i] && (!/^\\d$/.test(b1[i])))\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\ta1 = a1.slice(i);\n\t\t\tb1 = b1.slice(i);\n\t\t}\n\n\t\treturn mainFn(a1, b1, true);\n\t}\n}\n\nexport function _trim(input: string): string\n{\n\treturn input\n\t\t.replace(/^[_\\s]+(\\d+)/, '$1')\n\t\t.replace(/^\\D(\\d+)/, '$1')\n\t\t.trim()\n\t\t;\n}\n"]}