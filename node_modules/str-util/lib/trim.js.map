{"version":3,"file":"trim.js","sourceRoot":"","sources":["trim.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAaH,SAAgB,IAAI,CAAC,GAAG,EAAE,cAAsC;IAE/D,IAAI,GAAG,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;IAEzB,IAAI,OAAO,cAAc,IAAI,QAAQ,IAAI,OAAO,cAAc,IAAI,QAAQ,EAC1E;QACC,cAAc,GAAG;YAChB,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE;SAC/B,CAAC;KACF;IAED,IAAI,cAAc,EAClB;QACC,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,cAAc,CAAC,SAAS,EAC5B;YACC,KAAK,IAAI,GAAG,CAAC;SACb;QAED,IAAI,EAAE,GAAG,EAAE,CAAC;QACZ,IAAI,CAAC,CAAC;QAEN,IAAI,OAAO,cAAc,CAAC,IAAI,IAAI,QAAQ,EAC1C;YACC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEjD,IAAI,cAAc,CAAC,SAAS,EAC5B;gBACC,CAAC,IAAI,kBAAkB,CAAC;aACxB;iBAED;gBACC,CAAC,IAAI,iBAAiB,CAAC;aACvB;SACD;aAED;YACC,IAAI,cAAc,CAAC,SAAS,EAC5B;gBACC,CAAC,GAAG,kBAAkB,CAAC;aACvB;iBAED;gBACC,CAAC,GAAG,iBAAiB,CAAC;aACtB;SACD;QAED,IAAI,CAAC,cAAc,CAAC,QAAQ,EAC5B;YACC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACpB;QAED,IAAI,CAAC,cAAc,CAAC,MAAM,EAC1B;YACC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAEvC,kBAAkB;QAElB,KAAK,IAAI,CAAC,IAAI,EAAE,EAChB;YACC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACzB;KACD;SAED;QACC,GAAG,GAAG,GAAG;aACP,OAAO,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAClD;KACD;IAED,OAAO,GAAG,CAAC;AACZ,CAAC;AA3ED,oBA2EC;AAED,kBAAe,IAAI,CAAA;AAEnB,uCAAuC","sourcesContent":["/**\n * Created by user on 2018/1/7/007.\n */\n\nexport interface ITrimOptions\n{\n\ttrim?: string,\n\tmultiline?: boolean,\n\n\tno_start?: boolean,\n\tno_end?: boolean,\n}\n\nexport function trim(txt, character_mask?: string)\nexport function trim(txt, character_mask?: ITrimOptions)\nexport function trim(txt, character_mask?: string | ITrimOptions)\n{\n\tlet ret = txt.toString();\n\n\tif (typeof character_mask == 'number' || typeof character_mask == 'string')\n\t{\n\t\tcharacter_mask = {\n\t\t\ttrim: character_mask.toString(),\n\t\t};\n\t}\n\n\tif (character_mask)\n\t{\n\t\tlet flags = '';\n\n\t\tif (character_mask.multiline)\n\t\t{\n\t\t\tflags += 'm';\n\t\t}\n\n\t\tlet rs = [];\n\t\tlet r;\n\n\t\tif (typeof character_mask.trim == 'string')\n\t\t{\n\t\t\tr = character_mask.trim.replace(/(\\W)/g, '\\\\$1');\n\n\t\t\tif (character_mask.multiline)\n\t\t\t{\n\t\t\t\tr += ' \\\\t\\\\uFEFF\\\\xA0';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr += '\\\\s\\\\uFEFF\\\\xA0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (character_mask.multiline)\n\t\t\t{\n\t\t\t\tr = ' \\\\t\\\\uFEFF\\\\xA0';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tr = '\\\\s\\\\uFEFF\\\\xA0';\n\t\t\t}\n\t\t}\n\n\t\tif (!character_mask.no_start)\n\t\t{\n\t\t\trs.push(`^[${r}]+`);\n\t\t}\n\n\t\tif (!character_mask.no_end)\n\t\t{\n\t\t\trs.push(`[${r}]+$`);\n\t\t}\n\n\t\trs = rs.map(r => new RegExp(r, flags));\n\n\t\t//console.log(rs);\n\n\t\tfor (let r of rs)\n\t\t{\n\t\t\tret = ret.replace(r, '');\n\t\t}\n\t}\n\telse\n\t{\n\t\tret = ret\n\t\t\t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')\n\t\t;\n\t}\n\n\treturn ret;\n}\n\nexport default trim\n\n//console.log(trim('.  123  ?', '.?'));\n"]}