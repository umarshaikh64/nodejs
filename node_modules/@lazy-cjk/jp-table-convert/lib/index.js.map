{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFrom2To, IOptions, KEY_ZHT, KEY_ZHS, KEY_JP } from './types';\nimport { TABLE, TABLE_KEYS } from './table';\nimport { _re_cjk_conv } from 'regexp-helper/lib/cjk-conv';\nimport UString from 'uni-string/src/core';\nimport { _getdata } from './util';\n\n// /[\\u4E00-\\u9FFF\\u{20000}-\\u{2FA1F}]+/u\nconst REGEXP_TEST = new RegExp(_re_cjk_conv('u').source + '+', 'u');\n\nconst defaultOptions: IOptions = {\n\tsafe: true,\n};\n\nnamespace _\n{\n\texport let jp2zht: IFrom2To;\n\texport let jp2zhs: IFrom2To;\n\texport let zht2jp: IFrom2To;\n\texport let zht2zhs: IFrom2To;\n\texport let zhs2jp: IFrom2To;\n\texport let zhs2zht: IFrom2To;\n\n\tlet langs = Object.keys(TABLE);\n\n\t// @ts-ignore\n\tlangs.forEach(function (from: IKEY_FROM_TO)\n\t{\n\t\t// @ts-ignore\n\t\tlangs.forEach(function (to: IKEY_FROM_TO)\n\t\t{\n\t\t\tif (from == to) return;\n\n\t\t\t_[`${from}2${to}`] = function (str, options?: IOptions): string\n\t\t\t{\n\t\t\t\tif (!REGEXP_TEST.test(str.toString()))\n\t\t\t\t{\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\n\t\t\t\toptions = Object.assign({}, defaultOptions, options);\n\n\t\t\t\treturn UString.split(str, '')\n\t\t\t\t\t.map(function (char: string)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (options.skip && options.skip.indexOf(char) != -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn char;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet c: string;\n\t\t\t\t\t\tif (c = _getdata(char, from, to, options.safe))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn char;\n\t\t\t\t\t})\n\t\t\t\t\t.join('')\n\t\t\t\t\t;\n\t\t\t} as IFrom2To;\n\t\t});\n\t});\n}\n\n/**\n * only 只將 日文漢字 => 轉為繁漢字\n * @type {IFrom2To}\n */\nexport const jp2zht = _.jp2zht as IFrom2To;\n/**\n * only 只將 日文漢字 => 轉為簡漢字\n * @type {IFrom2To}\n */\nexport const jp2zhs = _.jp2zhs as IFrom2To;\n\n/**\n * only 簡漢字 => 轉為日漢字\n * @type {IFrom2To}\n */\nexport const zhs2jp = _.zhs2jp;\n\n/**\n * only 只將 繁漢字 => 轉為日文漢字\n * @type {IFrom2To}\n */\nexport const zht2jp = _.zht2jp;\n\n/**\n * only 只將簡繁日 當中共通的 繁漢字 => 轉為簡漢字\n * 請勿作為簡繁轉換用\n * @type {IFrom2To}\n */\nexport const zht2zhs = _.zht2zhs;\n\n/**\n * only 只將簡繁日 當中共通的 簡漢字 => 轉為繁漢字\n * 請勿作為簡繁轉換用\n * @type {IFrom2To}\n */\nexport const zhs2zht = _.zhs2zht;\n\n/**\n * only 只將簡繁日 當中共通的 簡繁漢字 => 轉為日文漢字\n *\n * @alias cjk2jp\n *\n * @param str\n * @param {IOptions} options\n * @returns {string}\n */\nexport function zh2jp(str, options?: IOptions): string\n{\n\tif (!REGEXP_TEST.test(str.toString()))\n\t{\n\t\treturn str;\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\n\treturn UString.split(str, '')\n\t\t.map(function (char: string)\n\t\t{\n\t\t\tif (options.skip && options.skip.indexOf(char) != -1)\n\t\t\t{\n\t\t\t\treturn char;\n\t\t\t}\n\n\t\t\tlet c: string;\n\t\t\tif (c = _getdata(char, KEY_ZHT, KEY_JP, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\telse if (c = _getdata(char, KEY_ZHS, KEY_JP, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\n\t\t\treturn char;\n\t\t})\n\t\t.join('')\n\t\t;\n}\n\n/**\n * only 只將簡繁日 當中共通的 簡繁漢字 => 轉為日文漢字\n *\n * @alias zh2jp\n *\n * @param str\n * @param {IOptions} options\n * @returns {string}\n */\nexport const cjk2jp = zh2jp;\n\n/**\n * only 只將簡繁日 當中共通的 漢字 => 轉為繁體漢字\n * 請勿作為簡繁轉換用\n *\n * @param str\n * @param {IOptions} options\n * @returns {string}\n */\nexport function cjk2zht(str, options?: IOptions): string\n{\n\tif (!REGEXP_TEST.test(str.toString()))\n\t{\n\t\treturn str;\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\n\treturn UString.split(str, '')\n\t\t.map(function (char: string)\n\t\t{\n\t\t\tif (options.skip && options.skip.indexOf(char) != -1)\n\t\t\t{\n\t\t\t\treturn char;\n\t\t\t}\n\n\t\t\tlet c: string;\n\t\t\tif (c = _getdata(char, KEY_JP, KEY_ZHT, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\telse if (c = _getdata(char, KEY_ZHS, KEY_ZHT, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\n\t\t\treturn char;\n\t\t})\n\t\t.join('')\n\t\t;\n}\n\n/**\n * only 只將簡繁日 當中共通的 漢字 => 轉為簡體漢字\n * 請勿作為簡繁轉換用\n *\n * @param str\n * @param {IOptions} options\n * @returns {string}\n */\nexport function cjk2zhs(str, options?: IOptions): string\n{\n\tif (!REGEXP_TEST.test(str.toString()))\n\t{\n\t\treturn str;\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\n\treturn UString.split(str, '')\n\t\t.map(function (char: string)\n\t\t{\n\t\t\tif (options.skip && options.skip.indexOf(char) != -1)\n\t\t\t{\n\t\t\t\treturn char;\n\t\t\t}\n\n\t\t\tlet c: string;\n\t\t\tif (c = _getdata(char, KEY_JP, KEY_ZHS, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\telse if (c = _getdata(char, KEY_ZHT, KEY_ZHS, options.safe))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\n\t\t\treturn char;\n\t\t})\n\t\t.join('')\n\t\t;\n}\n\nexport default exports as typeof import('./index');\n"]}