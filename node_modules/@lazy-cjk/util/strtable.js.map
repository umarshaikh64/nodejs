{"version":3,"file":"strtable.js","sourceRoot":"","sources":["strtable.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;;AAEH,4DAAiC;AAQjC,SAAgB,eAAe,CAAC,KAE/B,EAAE,UAAoB,EAAE;IAExB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EACrD;QACC,MAAM,IAAI,SAAS,CAAC,UAAU,OAAO,KAAK,KAAK,KAAK,EAAE,CAAC,CAAC;KACxD;IAED,IAAI,IAAI,GAAa,EAAE,CAAC;IACxB,IAAI,EAAE,GAAa,EAAE,CAAC;IAEtB,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,EAAE,CAAC,IAAI,EAAE,CAAC;IAEV,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAEjD,KAAK,IAAI,CAAC,IAAI,EAAE,EAChB;QACC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAElB,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,IAAI,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;QAEnB,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EACtC;YACC,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,IAAI,EAAE,UAAU,EAAE,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;YAEnE,IAAI,OAAO,CAAC,MAAM,EAClB;gBACC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,SAAS;aACT;iBAED;gBACC,kBAAkB;gBAClB,kBAAkB;gBAElB,MAAM,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;gBACzB,MAAM;aACN;SACD;QAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACb,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACZ;IAED,OAAO;QACN,IAAI;QACJ,EAAE;KACF,CAAA;AACF,CAAC;AAnDD,0CAmDC;AAED,SAAgB,UAAU,CAAC,KAE1B,EAAE,OAAkB;IAEpB,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,GAAG,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAEpD,OAAO;QACN,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QACnB,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;KACf,CAAA;AACF,CAAC;AAVD,gCAUC;AAED,SAAgB,OAAO,CAAC,CAAS;IAEhC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACpB,CAAC;AAHD,0BAGC;AAED,SAAgB,SAAS,CAAC,CAAS;IAElC,OAAO,oBAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7B,CAAC;AAHD,8BAGC;AAED,kBAAe,OAAsC,CAAC","sourcesContent":["/**\n * Created by user on 2020/5/29.\n */\n\nimport UString from 'uni-string';\n\nexport interface IOptions\n{\n\tcoreJs?: boolean,\n\tignore?: boolean,\n}\n\nexport function toStrTableArray(table: {\n\t[k: string]: string,\n}, options: IOptions = {})\n{\n\tif (typeof table !== 'object' || Array.isArray(table))\n\t{\n\t\tthrow new TypeError(`table '${typeof table}' ${table}`);\n\t}\n\n\tlet from: string[] = [];\n\tlet to: string[] = [];\n\n\tconst ks = Object.keys(table);\n\tks.sort();\n\n\tlet split = options.coreJs ? jsSplit : utf8Split;\n\n\tfor (let k of ks)\n\t{\n\t\tlet k2 = table[k];\n\n\t\tlet s1 = split(k);\n\t\tlet s2 = split(k2);\n\n\t\tif (s1.length !== 1 || s2.length !== 1)\n\t\t{\n\t\t\tlet msg = `'${k}' s1: ${s1.length} ${s1} ; s2: ${s2.length} ${s2}`;\n\n\t\t\tif (options.ignore)\n\t\t\t{\n\t\t\t\tconsole.error(msg);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//console.dir(s1);\n\t\t\t\t//console.dir(s2);\n\n\t\t\t\tthrow new TypeError(msg);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfrom.push(k);\n\t\tto.push(k2);\n\t}\n\n\treturn {\n\t\tfrom,\n\t\tto,\n\t}\n}\n\nexport function toStrTable(table: {\n\t[k: string]: string,\n}, options?: IOptions)\n{\n\tlet { from, to, } = toStrTableArray(table, options);\n\n\treturn {\n\t\tfrom: from.join(''),\n\t\tto: to.join(''),\n\t}\n}\n\nexport function jsSplit(s: string): string[]\n{\n\treturn s.split('');\n}\n\nexport function utf8Split(s: string): string[]\n{\n\treturn UString.split(s, '');\n}\n\nexport default exports as typeof import('./strtable');\n"]}