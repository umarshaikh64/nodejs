{"version":3,"file":"list.js","sourceRoot":"","sources":["list.ts"],"names":[],"mappings":";;;AAEA,6DAAqE;AAErE,SAAgB,gBAAgB,CAAmB,GAAiC;IAEnF,OAAQ,GAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACnC,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO,CAAC,CAAC;IACV,CAAC,EAAE,EAAmB,CAAC,CAAA;AACxB,CAAC;AAND,4CAMC;AAED,SAAgB,aAAa,CAAmB,IAAO;IAEtD,OAAO,wBAAc,CAAC,IAAI,EAAE;QAC3B,IAAI,EAAE,KAAK;QACX,WAAW,EAAE,IAAI;KACjB,CAAQ,CAAA;AACV,CAAC;AAND,sCAMC","sourcesContent":["import { ITSArrayListMaybeReadonly } from 'ts-type';\nimport { IRecordMap } from '../types';\nimport { lazyAll as _jpListLazyAll } from '@lazy-cjk/jp-table-alias';\n\nexport function jpListLazyAllMap<T extends string>(arr: ITSArrayListMaybeReadonly<T>)\n{\n\treturn (arr as T[]).reduce((a, b) => {\n\t\ta[b] = jpListLazyAll(b);\n\t\treturn a;\n\t}, {} as IRecordMap<T>)\n}\n\nexport function jpListLazyAll<T extends string>(char: T): (T & string)[]\n{\n\treturn _jpListLazyAll(char, {\n\t\tsafe: false,\n\t\tincludeSelf: true,\n\t}) as any\n}\n"]}