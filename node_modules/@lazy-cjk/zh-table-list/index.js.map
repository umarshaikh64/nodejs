{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;;;;;;;;;;;;AAEH,iEAAsF;AACtF,8EAAgD;AAChD,8EAA8C;AAC9C,+DAAiE;AACjE,qCAA2C;AAG3C,8CAA4B;AAE5B;;;GAGG;AACU,QAAA,EAAE,GAAG,cAAO,CAAC,IAAI,CAAC,CAAC;AAEhC;;;GAGG;AACU,QAAA,EAAE,GAAG,cAAO,CAAC,IAAI,CAAC,CAAC;AAEhC;;;GAGG;AACU,QAAA,EAAE,GAAG,cAAO,CAAC,IAAI,CAAC,CAAC;AAEhC;;;;;;GAMG;AACH,SAAgB,IAAI,CAAC,IAAY,EAAE,UAAoB,EAAE;IAExD,IAAI,CAAC,IAAI,EACT;QACC,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EACpD;QACC,OAAO,CAAC,IAAI,CAAC,CAAC;KACd;IAED,IAAI,EAAE,GAAG,yBAAM,CAAC,IAAI,CAAC,CAAC;IACtB,IAAI,EAAE,GAAG,yBAAM,CAAC,IAAI,CAAC,CAAC;IAEtB,IAAI,WAAW,GAAY,OAAO,CAAC,WAAmB,GAAG,CAAC,CAAC;IAE3D,IAAI,CAAC,GAAG,WAAI,CAAC,EAAE,EACd,IAAI,EACJ,wBAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAC1B,wBAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAC1B,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,wBAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,EAC7E,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,wBAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,EAC7E,wBAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAE1B,CAAC,WAAW,IAAI,yBAAM,CAAC,IAAI,CAAC,CAAC,EAC7B,CAAC,WAAW,IAAI,0BAAO,CAAC,IAAI,CAAC,CAAC,EAC9B,CAAC,WAAW,IAAI,0BAAO,CAAC,IAAI,CAAC,CAAC,EAE9B,CAAC,WAAW,IAAI,wBAAM,CAAC,KAAK,CAAC,IAAI,EAAE;QAClC,IAAI,EAAE,WAAW,IAAI,CAAC;KACtB,CAAC,CAAC,EACH,CAAC,WAAW,IAAI,wBAAM,CAAC,KAAK,CAAC,IAAI,EAAE;QAClC,IAAI,EAAE,WAAW,IAAI,CAAC;KACtB,CAAC,CAAC,EAEH,CAAC,WAAW,GAAG,CAAC,IAAI,sCAAoB,CAAC,IAAI,CAAC,CAAC,CAC/C,CAAC;IAEF;;;;;;;;;;;;;;;;;MAiBE;IAEF,OAAO,CAAC,CAAC;AACV,CAAC;AA3DD,oBA2DC;AAED,kBAAe,OAAmC,CAAC","sourcesContent":["/**\n * Created by user on 2018/6/10/010.\n */\n\nimport { jp2zht, jp2zhs, cjk2jp, cjk2zhs, cjk2zht } from '@lazy-cjk/jp-table-convert';\nimport libTable from '@lazy-cjk/zh-table-alias';\nimport jpList from '@lazy-cjk/jp-table-alias';\nimport { greedyTableCharArray } from '@lazy-cjk/zh-table-greedy';\nimport { _wrapFn, _get } from './lib/util';\nimport { IOptions } from './lib/types';\n\nexport * from './lib/types';\n\n/**\n * 取出此漢字所對應的繁漢字\n * @type {(char: string, options?: IOptions) => string[]}\n */\nexport const tw = _wrapFn('tw');\n\n/**\n * 取出此漢字所對應的簡漢字\n * @type {(char: string, options?: IOptions) => string[]}\n */\nexport const cn = _wrapFn('cn');\n\n/**\n * 取出此漢字所對應的日漢字\n * @type {(char: string, options?: IOptions) => string[]}\n */\nexport const jp = _wrapFn('jp');\n\n/**\n * 自動取出此漢字所對應的簡繁日漢字\n *\n * @param {string} char\n * @param {IOptions} options\n * @returns {string[]}\n */\nexport function auto(char: string, options: IOptions = {}): string[]\n{\n\tif (!char)\n\t{\n\t\treturn null;\n\t}\n\n\tif (options.skip && options.skip.indexOf(char) != -1)\n\t{\n\t\treturn [char];\n\t}\n\n\tlet jt = jp2zht(char);\n\tlet js = jp2zhs(char);\n\n\tlet greedyTable: number = (options.greedyTable as any) | 0;\n\n\tlet a = _get([],\n\t\tchar,\n\t\tlibTable.tw(char, options),\n\t\tlibTable.cn(char, options),\n\t\t(!options.skip || options.skip.indexOf(jt) == -1) && libTable.cn(jt, options),\n\t\t(!options.skip || options.skip.indexOf(js) == -1) && libTable.tw(js, options),\n\t\tlibTable.jp(char, options),\n\n\t\t(greedyTable && cjk2jp(char)),\n\t\t(greedyTable && cjk2zhs(char)),\n\t\t(greedyTable && cjk2zht(char)),\n\n\t\t(greedyTable && jpList.zh2jp(char, {\n\t\t\tsafe: greedyTable <= 1\n\t\t})),\n\t\t(greedyTable && jpList.jp2zh(char, {\n\t\t\tsafe: greedyTable <= 1\n\t\t})),\n\n\t\t(greedyTable > 1 && greedyTableCharArray(char)),\n\t);\n\n\t/*\n\tif (!skip || skip.indexOf(jt) == -1)\n\t{\n\t\ta = a.concat(...cn(jt));\n\t}\n\tif (!skip || skip.indexOf(js) == -1)\n\t{\n\t\ta = a.concat(...tw(js));\n\t}\n\n\tif (zhtw_convert.table_jp[char])\n\t{\n\t\ta = a.concat(jp(char));\n\t}\n\n\ta = array_unique(a);\n\ta.sort();\n\t*/\n\n\treturn a;\n}\n\nexport default exports as typeof import('./index');\n"]}