{"version":3,"file":"posix.js","sourceRoot":"","sources":["posix.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAGH,2CAA6E;AAE7E;;GAEG;AACH,IAAY,KAgBX;AAhBD,WAAY,KAAK;IAEhB,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,wBAAe,CAAA;IACf,sBAAa,CAAA;IACb,0BAAiB,CAAA;AAClB,CAAC,EAhBW,KAAK,GAAL,aAAK,KAAL,aAAK,QAgBhB;AAEY,QAAA,WAAW,GAEpB;IACH,KAAK,EAAE;QACN,CAAC,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC;KAC7C;IACD,KAAK,EAAE;QACN,CAAC,cAAc,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC;QAC3C,CAAC,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC;KAC9C;CACD,CAAC;AAIF,aAAa;AACb,SAAgB,SAAS,CAAI,IAAY,EAAE,cAAoC,MAAM,EAAE,YAAY,GAAG,mBAAW;IAEhH,aAAa;IACb,OAAO,qBAAW,CAAC,IAAI,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AACrD,CAAC;AAJD,8BAIC;AAED,kBAAe,KAAK,CAAC","sourcesContent":["/**\n * Created by user on 2018/4/27/027.\n */\n\nimport { ICreateRegExp, ITypeCreateRegExp } from '../../index';\nimport { IPatternTestFn, IPatternTestRow, testPattern } from '../../pattern';\n\n/**\n * @link https://www.regular-expressions.info/posixbrackets.html\n */\nexport enum POXIX\n{\n\talnum = 'alnum',\n\talpha = 'alpha',\n\tascii = 'ascii',\n\tblank = 'blank',\n\tcntrl = 'cntrl',\n\tdigit = 'digit',\n\tgraph = 'graph',\n\tlower = 'lower',\n\tprint = 'print',\n\tpunct = 'punct',\n\tspace = 'space',\n\tupper = 'upper',\n\tword = 'word',\n\txdigit = 'xdigit',\n}\n\nexport const PatternTest: {\n\t[k in keyof typeof POXIX]?: IPatternTestRow[]\n} = {\n\talnum: [\n\t\t['^[:alnum:]+$', 'g', 'azAZ09', true, 'test'],\n\t],\n\talpha: [\n\t\t['^[:alpha:]+$', 'g', 'azAZ', true, 'test'],\n\t\t['^[:alpha:]+$', 'g', 'azAZ09', false, 'test'],\n\t],\n};\n\nexport function testPOXIX(name: string, RegExpClass?: typeof RegExp, testPattern?: typeof PatternTest): boolean\nexport function testPOXIX(name: string, RegExpClass?: ICreateRegExp, testPattern?: typeof PatternTest): boolean\n// @ts-ignore\nexport function testPOXIX<T>(name: string, RegExpClass: ITypeCreateRegExp<T> = RegExp, testPatterns = PatternTest): boolean\n{\n\t// @ts-ignore\n\treturn testPattern(name, RegExpClass, testPatterns);\n}\n\nexport default POXIX;\n"]}