/**
 * Created by user on 2018/5/6/006.
 */
import { ICreateRegExp, ITypeCreateRegExp } from '../../index';
import { IPatternTestRow } from '../../pattern';
export declare const KEY_PREFIX = "\\p{";
export declare const KEY_PREFIX_NEGATION = "\\P{";
export declare const KEY_SUFFIX = "}";
/**
 * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html
 * @link https://en.wikipedia.org/wiki/Unicode_character_property
 * @link http://www.wellho.net/regex/javare.html
 * @link https://zhuanlan.zhihu.com/p/33335629
 * @link https://github.com/Icemic/huozi.js/blob/master/lib/isCJK.js
 * @link https://github.com/ethantw/Han/blob/master/src/js/regex/unicode.js
 * @link https://github.com/tc39/proposal-regexp-unicode-property-escapes#why-not-support-the-name-property-pname
 */
export declare const UNICODE: {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
};
export declare const UNICODE_ALL: {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
    Cased_Letter: boolean;
    LC: boolean;
    Close_Punctuation: boolean;
    Pe: boolean;
    Connector_Punctuation: boolean;
    Pc: boolean;
    Control: boolean;
    Cc: boolean;
    cntrl: boolean;
    Currency_Symbol: boolean;
    Sc: boolean;
    Dash_Punctuation: boolean;
    Pd: boolean;
    Decimal_Number: boolean;
    Nd: boolean;
    digit: boolean;
    Enclosing_Mark: boolean;
    Me: boolean;
    Final_Punctuation: boolean;
    Pf: boolean;
    Format: boolean;
    Cf: boolean;
    Initial_Punctuation: boolean;
    Pi: boolean;
    L: boolean;
    Letter_Number: boolean;
    Nl: boolean;
    Line_Separator: boolean;
    Zl: boolean;
    Lowercase_Letter: boolean;
    Ll: boolean;
    Mark: boolean;
    M: boolean;
    Combining_Mark: boolean;
    Math_Symbol: boolean;
    Sm: boolean;
    Modifier_Letter: boolean;
    Lm: boolean;
    Modifier_Symbol: boolean;
    Sk: boolean;
    Nonspacing_Mark: boolean;
    Mn: boolean;
    Number: boolean;
    N: boolean;
    Open_Punctuation: boolean;
    Ps: boolean;
    Other: boolean;
    C: boolean;
    Other_Letter: boolean;
    Lo: boolean;
    Other_Number: boolean;
    No: boolean;
    Other_Punctuation: boolean;
    Po: boolean;
    Other_Symbol: boolean;
    So: boolean;
    Paragraph_Separator: boolean;
    Zp: boolean;
    Private_Use: boolean;
    Co: boolean;
    Punctuation: boolean;
    P: boolean;
    punct: boolean;
    Separator: boolean;
    Z: boolean;
    Space_Separator: boolean;
    Zs: boolean;
    Spacing_Mark: boolean;
    Mc: boolean;
    Surrogate: boolean;
    Cs: boolean;
    Symbol: boolean;
    S: boolean;
    Titlecase_Letter: boolean;
    Lt: boolean;
    Unassigned: boolean;
    Cn: boolean;
    Uppercase_Letter: boolean;
    Lu: boolean;
    ASCII: boolean;
    ASCII_Hex_Digit: boolean;
    AHex: boolean;
    Alphabetic: boolean;
    Any: boolean;
    Assigned: boolean;
    Bidi_Control: boolean;
    Bidi_C: boolean;
    Bidi_Mirrored: boolean;
    Bidi_M: boolean;
    Case_Ignorable: boolean;
    CI: boolean;
    Cased: boolean;
    Changes_When_Casefolded: boolean;
    CWCF: boolean;
    Changes_When_Casemapped: boolean;
    CWCM: boolean;
    Changes_When_Lowercased: boolean;
    CWL: boolean;
    Changes_When_NFKC_Casefolded: boolean;
    CWKCF: boolean;
    Changes_When_Titlecased: boolean;
    CWT: boolean;
    Changes_When_Uppercased: boolean;
    CWU: boolean;
    Dash: boolean;
    Default_Ignorable_Code_Point: boolean;
    DI: boolean;
    Deprecated: boolean;
    Dep: boolean;
    Diacritic: boolean;
    Dia: boolean;
    Emoji: boolean;
    Emoji_Component: boolean;
    Emoji_Modifier: boolean;
    Emoji_Modifier_Base: boolean;
    Emoji_Presentation: boolean;
    Extender: boolean;
    Ext: boolean;
    Grapheme_Base: boolean;
    Gr_Base: boolean;
    Grapheme_Extend: boolean;
    Gr_Ext: boolean;
    Hex_Digit: boolean;
    Hex: boolean;
    IDS_Binary_Operator: boolean;
    IDSB: boolean;
    IDS_Trinary_Operator: boolean;
    IDST: boolean;
    ID_Continue: boolean;
    IDC: boolean;
    ID_Start: boolean;
    IDS: boolean;
    Ideo: boolean;
    Join_Control: boolean;
    Join_C: boolean;
    Logical_Order_Exception: boolean;
    LOE: boolean;
    Lowercase: boolean;
    Math: boolean;
    Noncharacter_Code_Point: boolean;
    NChar: boolean;
    Pattern_Syntax: boolean;
    Pat_Syn: boolean;
    Pattern_White_Space: boolean;
    Pat_WS: boolean;
    Quotation_Mark: boolean;
    QMark: boolean;
    Radical: boolean;
    Regional_Indicator: boolean;
    RI: boolean;
    Sentence_Terminal: boolean;
    STerm: boolean;
    Soft_Dotted: boolean;
    SD: boolean;
    Terminal_Punctuation: boolean;
    Term: boolean;
    UIdeo: boolean;
    Uppercase: boolean;
    Variation_Selector: boolean;
    VS: boolean;
    space: boolean;
    XID_Continue: boolean;
    XIDC: boolean;
    XID_Start: boolean;
    XIDS: boolean;
};
export declare enum UNICODE_NAME_ALIAS {
    Quotation_Mark = "QMark",
    Pattern_Syntax = "Pat_Syn",
    Ideographic = "Ideo"
}
export declare const UNICODE_NAME_ALIAS_ALL: {
    C: string;
    Other: string;
    Cc: string;
    Control: string;
    Cf: string;
    Format: string;
    Cn: string;
    Unassigned: string;
    Co: string;
    Private_Use: string;
    Cs: string;
    Surrogate: string;
    L: string;
    Letter: string;
    LC: string;
    Cased_Letter: string;
    Ll: string;
    Lowercase_Letter: string;
    Lm: string;
    Modifier_Letter: string;
    Lo: string;
    Other_Letter: string;
    Lt: string;
    Titlecase_Letter: string;
    Lu: string;
    Uppercase_Letter: string;
    M: string;
    Mark: string;
    Mc: string;
    Spacing_Mark: string;
    Me: string;
    Enclosing_Mark: string;
    Mn: string;
    Nonspacing_Mark: string;
    N: string;
    Number: string;
    Nd: string;
    Decimal_Number: string;
    Nl: string;
    Letter_Number: string;
    No: string;
    Other_Number: string;
    P: string;
    Punctuation: string;
    Pc: string;
    Connector_Punctuation: string;
    Pd: string;
    Dash_Punctuation: string;
    Pe: string;
    Close_Punctuation: string;
    Pf: string;
    Final_Punctuation: string;
    Pi: string;
    Initial_Punctuation: string;
    Po: string;
    Other_Punctuation: string;
    Ps: string;
    Open_Punctuation: string;
    S: string;
    Symbol: string;
    Sc: string;
    Currency_Symbol: string;
    Sk: string;
    Modifier_Symbol: string;
    Sm: string;
    Math_Symbol: string;
    So: string;
    Other_Symbol: string;
    Z: string;
    Separator: string;
    Zl: string;
    Line_Separator: string;
    Zp: string;
    Paragraph_Separator: string;
    Zs: string;
    Space_Separator: string;
} & typeof UNICODE_NAME_ALIAS;
/**
 * @todo test more
 */
export declare const PatternTest: {
    [k in keyof typeof UNICODE_ALL]?: IPatternTestRow[];
};
export declare const _testUnicode: {
    (name: string, RegExpClass?: RegExpConstructor, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        Cased_Letter?: IPatternTestRow[];
        LC?: IPatternTestRow[];
        Close_Punctuation?: IPatternTestRow[];
        Pe?: IPatternTestRow[];
        Connector_Punctuation?: IPatternTestRow[];
        Pc?: IPatternTestRow[];
        Control?: IPatternTestRow[];
        Cc?: IPatternTestRow[];
        cntrl?: IPatternTestRow[];
        Currency_Symbol?: IPatternTestRow[];
        Sc?: IPatternTestRow[];
        Dash_Punctuation?: IPatternTestRow[];
        Pd?: IPatternTestRow[];
        Decimal_Number?: IPatternTestRow[];
        Nd?: IPatternTestRow[];
        digit?: IPatternTestRow[];
        Enclosing_Mark?: IPatternTestRow[];
        Me?: IPatternTestRow[];
        Final_Punctuation?: IPatternTestRow[];
        Pf?: IPatternTestRow[];
        Format?: IPatternTestRow[];
        Cf?: IPatternTestRow[];
        Initial_Punctuation?: IPatternTestRow[];
        Pi?: IPatternTestRow[];
        L?: IPatternTestRow[];
        Letter_Number?: IPatternTestRow[];
        Nl?: IPatternTestRow[];
        Line_Separator?: IPatternTestRow[];
        Zl?: IPatternTestRow[];
        Lowercase_Letter?: IPatternTestRow[];
        Ll?: IPatternTestRow[];
        Mark?: IPatternTestRow[];
        M?: IPatternTestRow[];
        Combining_Mark?: IPatternTestRow[];
        Math_Symbol?: IPatternTestRow[];
        Sm?: IPatternTestRow[];
        Modifier_Letter?: IPatternTestRow[];
        Lm?: IPatternTestRow[];
        Modifier_Symbol?: IPatternTestRow[];
        Sk?: IPatternTestRow[];
        Nonspacing_Mark?: IPatternTestRow[];
        Mn?: IPatternTestRow[];
        Number?: IPatternTestRow[];
        N?: IPatternTestRow[];
        Open_Punctuation?: IPatternTestRow[];
        Ps?: IPatternTestRow[];
        Other?: IPatternTestRow[];
        C?: IPatternTestRow[];
        Other_Letter?: IPatternTestRow[];
        Lo?: IPatternTestRow[];
        Other_Number?: IPatternTestRow[];
        No?: IPatternTestRow[];
        Other_Punctuation?: IPatternTestRow[];
        Po?: IPatternTestRow[];
        Other_Symbol?: IPatternTestRow[];
        So?: IPatternTestRow[];
        Paragraph_Separator?: IPatternTestRow[];
        Zp?: IPatternTestRow[];
        Private_Use?: IPatternTestRow[];
        Co?: IPatternTestRow[];
        Punctuation?: IPatternTestRow[];
        P?: IPatternTestRow[];
        punct?: IPatternTestRow[];
        Separator?: IPatternTestRow[];
        Z?: IPatternTestRow[];
        Space_Separator?: IPatternTestRow[];
        Zs?: IPatternTestRow[];
        Spacing_Mark?: IPatternTestRow[];
        Mc?: IPatternTestRow[];
        Surrogate?: IPatternTestRow[];
        Cs?: IPatternTestRow[];
        Symbol?: IPatternTestRow[];
        S?: IPatternTestRow[];
        Titlecase_Letter?: IPatternTestRow[];
        Lt?: IPatternTestRow[];
        Unassigned?: IPatternTestRow[];
        Cn?: IPatternTestRow[];
        Uppercase_Letter?: IPatternTestRow[];
        Lu?: IPatternTestRow[];
        ASCII?: IPatternTestRow[];
        ASCII_Hex_Digit?: IPatternTestRow[];
        AHex?: IPatternTestRow[];
        Alphabetic?: IPatternTestRow[];
        Any?: IPatternTestRow[];
        Assigned?: IPatternTestRow[];
        Bidi_Control?: IPatternTestRow[];
        Bidi_C?: IPatternTestRow[];
        Bidi_Mirrored?: IPatternTestRow[];
        Bidi_M?: IPatternTestRow[];
        Case_Ignorable?: IPatternTestRow[];
        CI?: IPatternTestRow[];
        Cased?: IPatternTestRow[];
        Changes_When_Casefolded?: IPatternTestRow[];
        CWCF?: IPatternTestRow[];
        Changes_When_Casemapped?: IPatternTestRow[];
        CWCM?: IPatternTestRow[];
        Changes_When_Lowercased?: IPatternTestRow[];
        CWL?: IPatternTestRow[];
        Changes_When_NFKC_Casefolded?: IPatternTestRow[];
        CWKCF?: IPatternTestRow[];
        Changes_When_Titlecased?: IPatternTestRow[];
        CWT?: IPatternTestRow[];
        Changes_When_Uppercased?: IPatternTestRow[];
        CWU?: IPatternTestRow[];
        Dash?: IPatternTestRow[];
        Default_Ignorable_Code_Point?: IPatternTestRow[];
        DI?: IPatternTestRow[];
        Deprecated?: IPatternTestRow[];
        Dep?: IPatternTestRow[];
        Diacritic?: IPatternTestRow[];
        Dia?: IPatternTestRow[];
        Emoji?: IPatternTestRow[];
        Emoji_Component?: IPatternTestRow[];
        Emoji_Modifier?: IPatternTestRow[];
        Emoji_Modifier_Base?: IPatternTestRow[];
        Emoji_Presentation?: IPatternTestRow[];
        Extender?: IPatternTestRow[];
        Ext?: IPatternTestRow[];
        Grapheme_Base?: IPatternTestRow[];
        Gr_Base?: IPatternTestRow[];
        Grapheme_Extend?: IPatternTestRow[];
        Gr_Ext?: IPatternTestRow[];
        Hex_Digit?: IPatternTestRow[];
        Hex?: IPatternTestRow[];
        IDS_Binary_Operator?: IPatternTestRow[];
        IDSB?: IPatternTestRow[];
        IDS_Trinary_Operator?: IPatternTestRow[];
        IDST?: IPatternTestRow[];
        ID_Continue?: IPatternTestRow[];
        IDC?: IPatternTestRow[];
        ID_Start?: IPatternTestRow[];
        IDS?: IPatternTestRow[];
        Ideo?: IPatternTestRow[];
        Join_Control?: IPatternTestRow[];
        Join_C?: IPatternTestRow[];
        Logical_Order_Exception?: IPatternTestRow[];
        LOE?: IPatternTestRow[];
        Lowercase?: IPatternTestRow[];
        Math?: IPatternTestRow[];
        Noncharacter_Code_Point?: IPatternTestRow[];
        NChar?: IPatternTestRow[];
        Pattern_Syntax?: IPatternTestRow[];
        Pat_Syn?: IPatternTestRow[];
        Pattern_White_Space?: IPatternTestRow[];
        Pat_WS?: IPatternTestRow[];
        Quotation_Mark?: IPatternTestRow[];
        QMark?: IPatternTestRow[];
        Radical?: IPatternTestRow[];
        Regional_Indicator?: IPatternTestRow[];
        RI?: IPatternTestRow[];
        Sentence_Terminal?: IPatternTestRow[];
        STerm?: IPatternTestRow[];
        Soft_Dotted?: IPatternTestRow[];
        SD?: IPatternTestRow[];
        Terminal_Punctuation?: IPatternTestRow[];
        Term?: IPatternTestRow[];
        UIdeo?: IPatternTestRow[];
        Uppercase?: IPatternTestRow[];
        Variation_Selector?: IPatternTestRow[];
        VS?: IPatternTestRow[];
        space?: IPatternTestRow[];
        XID_Continue?: IPatternTestRow[];
        XIDC?: IPatternTestRow[];
        XID_Start?: IPatternTestRow[];
        XIDS?: IPatternTestRow[];
    }): boolean;
    (name: string, RegExpClass?: ICreateRegExp, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        Cased_Letter?: IPatternTestRow[];
        LC?: IPatternTestRow[];
        Close_Punctuation?: IPatternTestRow[];
        Pe?: IPatternTestRow[];
        Connector_Punctuation?: IPatternTestRow[];
        Pc?: IPatternTestRow[];
        Control?: IPatternTestRow[];
        Cc?: IPatternTestRow[];
        cntrl?: IPatternTestRow[];
        Currency_Symbol?: IPatternTestRow[];
        Sc?: IPatternTestRow[];
        Dash_Punctuation?: IPatternTestRow[];
        Pd?: IPatternTestRow[];
        Decimal_Number?: IPatternTestRow[];
        Nd?: IPatternTestRow[];
        digit?: IPatternTestRow[];
        Enclosing_Mark?: IPatternTestRow[];
        Me?: IPatternTestRow[];
        Final_Punctuation?: IPatternTestRow[];
        Pf?: IPatternTestRow[];
        Format?: IPatternTestRow[];
        Cf?: IPatternTestRow[];
        Initial_Punctuation?: IPatternTestRow[];
        Pi?: IPatternTestRow[];
        L?: IPatternTestRow[];
        Letter_Number?: IPatternTestRow[];
        Nl?: IPatternTestRow[];
        Line_Separator?: IPatternTestRow[];
        Zl?: IPatternTestRow[];
        Lowercase_Letter?: IPatternTestRow[];
        Ll?: IPatternTestRow[];
        Mark?: IPatternTestRow[];
        M?: IPatternTestRow[];
        Combining_Mark?: IPatternTestRow[];
        Math_Symbol?: IPatternTestRow[];
        Sm?: IPatternTestRow[];
        Modifier_Letter?: IPatternTestRow[];
        Lm?: IPatternTestRow[];
        Modifier_Symbol?: IPatternTestRow[];
        Sk?: IPatternTestRow[];
        Nonspacing_Mark?: IPatternTestRow[];
        Mn?: IPatternTestRow[];
        Number?: IPatternTestRow[];
        N?: IPatternTestRow[];
        Open_Punctuation?: IPatternTestRow[];
        Ps?: IPatternTestRow[];
        Other?: IPatternTestRow[];
        C?: IPatternTestRow[];
        Other_Letter?: IPatternTestRow[];
        Lo?: IPatternTestRow[];
        Other_Number?: IPatternTestRow[];
        No?: IPatternTestRow[];
        Other_Punctuation?: IPatternTestRow[];
        Po?: IPatternTestRow[];
        Other_Symbol?: IPatternTestRow[];
        So?: IPatternTestRow[];
        Paragraph_Separator?: IPatternTestRow[];
        Zp?: IPatternTestRow[];
        Private_Use?: IPatternTestRow[];
        Co?: IPatternTestRow[];
        Punctuation?: IPatternTestRow[];
        P?: IPatternTestRow[];
        punct?: IPatternTestRow[];
        Separator?: IPatternTestRow[];
        Z?: IPatternTestRow[];
        Space_Separator?: IPatternTestRow[];
        Zs?: IPatternTestRow[];
        Spacing_Mark?: IPatternTestRow[];
        Mc?: IPatternTestRow[];
        Surrogate?: IPatternTestRow[];
        Cs?: IPatternTestRow[];
        Symbol?: IPatternTestRow[];
        S?: IPatternTestRow[];
        Titlecase_Letter?: IPatternTestRow[];
        Lt?: IPatternTestRow[];
        Unassigned?: IPatternTestRow[];
        Cn?: IPatternTestRow[];
        Uppercase_Letter?: IPatternTestRow[];
        Lu?: IPatternTestRow[];
        ASCII?: IPatternTestRow[];
        ASCII_Hex_Digit?: IPatternTestRow[];
        AHex?: IPatternTestRow[];
        Alphabetic?: IPatternTestRow[];
        Any?: IPatternTestRow[];
        Assigned?: IPatternTestRow[];
        Bidi_Control?: IPatternTestRow[];
        Bidi_C?: IPatternTestRow[];
        Bidi_Mirrored?: IPatternTestRow[];
        Bidi_M?: IPatternTestRow[];
        Case_Ignorable?: IPatternTestRow[];
        CI?: IPatternTestRow[];
        Cased?: IPatternTestRow[];
        Changes_When_Casefolded?: IPatternTestRow[];
        CWCF?: IPatternTestRow[];
        Changes_When_Casemapped?: IPatternTestRow[];
        CWCM?: IPatternTestRow[];
        Changes_When_Lowercased?: IPatternTestRow[];
        CWL?: IPatternTestRow[];
        Changes_When_NFKC_Casefolded?: IPatternTestRow[];
        CWKCF?: IPatternTestRow[];
        Changes_When_Titlecased?: IPatternTestRow[];
        CWT?: IPatternTestRow[];
        Changes_When_Uppercased?: IPatternTestRow[];
        CWU?: IPatternTestRow[];
        Dash?: IPatternTestRow[];
        Default_Ignorable_Code_Point?: IPatternTestRow[];
        DI?: IPatternTestRow[];
        Deprecated?: IPatternTestRow[];
        Dep?: IPatternTestRow[];
        Diacritic?: IPatternTestRow[];
        Dia?: IPatternTestRow[];
        Emoji?: IPatternTestRow[];
        Emoji_Component?: IPatternTestRow[];
        Emoji_Modifier?: IPatternTestRow[];
        Emoji_Modifier_Base?: IPatternTestRow[];
        Emoji_Presentation?: IPatternTestRow[];
        Extender?: IPatternTestRow[];
        Ext?: IPatternTestRow[];
        Grapheme_Base?: IPatternTestRow[];
        Gr_Base?: IPatternTestRow[];
        Grapheme_Extend?: IPatternTestRow[];
        Gr_Ext?: IPatternTestRow[];
        Hex_Digit?: IPatternTestRow[];
        Hex?: IPatternTestRow[];
        IDS_Binary_Operator?: IPatternTestRow[];
        IDSB?: IPatternTestRow[];
        IDS_Trinary_Operator?: IPatternTestRow[];
        IDST?: IPatternTestRow[];
        ID_Continue?: IPatternTestRow[];
        IDC?: IPatternTestRow[];
        ID_Start?: IPatternTestRow[];
        IDS?: IPatternTestRow[];
        Ideo?: IPatternTestRow[];
        Join_Control?: IPatternTestRow[];
        Join_C?: IPatternTestRow[];
        Logical_Order_Exception?: IPatternTestRow[];
        LOE?: IPatternTestRow[];
        Lowercase?: IPatternTestRow[];
        Math?: IPatternTestRow[];
        Noncharacter_Code_Point?: IPatternTestRow[];
        NChar?: IPatternTestRow[];
        Pattern_Syntax?: IPatternTestRow[];
        Pat_Syn?: IPatternTestRow[];
        Pattern_White_Space?: IPatternTestRow[];
        Pat_WS?: IPatternTestRow[];
        Quotation_Mark?: IPatternTestRow[];
        QMark?: IPatternTestRow[];
        Radical?: IPatternTestRow[];
        Regional_Indicator?: IPatternTestRow[];
        RI?: IPatternTestRow[];
        Sentence_Terminal?: IPatternTestRow[];
        STerm?: IPatternTestRow[];
        Soft_Dotted?: IPatternTestRow[];
        SD?: IPatternTestRow[];
        Terminal_Punctuation?: IPatternTestRow[];
        Term?: IPatternTestRow[];
        UIdeo?: IPatternTestRow[];
        Uppercase?: IPatternTestRow[];
        Variation_Selector?: IPatternTestRow[];
        VS?: IPatternTestRow[];
        space?: IPatternTestRow[];
        XID_Continue?: IPatternTestRow[];
        XIDC?: IPatternTestRow[];
        XID_Start?: IPatternTestRow[];
        XIDS?: IPatternTestRow[];
    }): boolean;
    <T>(name: string, RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        Cased_Letter?: IPatternTestRow[];
        LC?: IPatternTestRow[];
        Close_Punctuation?: IPatternTestRow[];
        Pe?: IPatternTestRow[];
        Connector_Punctuation?: IPatternTestRow[];
        Pc?: IPatternTestRow[];
        Control?: IPatternTestRow[];
        Cc?: IPatternTestRow[];
        cntrl?: IPatternTestRow[];
        Currency_Symbol?: IPatternTestRow[];
        Sc?: IPatternTestRow[];
        Dash_Punctuation?: IPatternTestRow[];
        Pd?: IPatternTestRow[];
        Decimal_Number?: IPatternTestRow[];
        Nd?: IPatternTestRow[];
        digit?: IPatternTestRow[];
        Enclosing_Mark?: IPatternTestRow[];
        Me?: IPatternTestRow[];
        Final_Punctuation?: IPatternTestRow[];
        Pf?: IPatternTestRow[];
        Format?: IPatternTestRow[];
        Cf?: IPatternTestRow[];
        Initial_Punctuation?: IPatternTestRow[];
        Pi?: IPatternTestRow[];
        L?: IPatternTestRow[];
        Letter_Number?: IPatternTestRow[];
        Nl?: IPatternTestRow[];
        Line_Separator?: IPatternTestRow[];
        Zl?: IPatternTestRow[];
        Lowercase_Letter?: IPatternTestRow[];
        Ll?: IPatternTestRow[];
        Mark?: IPatternTestRow[];
        M?: IPatternTestRow[];
        Combining_Mark?: IPatternTestRow[];
        Math_Symbol?: IPatternTestRow[];
        Sm?: IPatternTestRow[];
        Modifier_Letter?: IPatternTestRow[];
        Lm?: IPatternTestRow[];
        Modifier_Symbol?: IPatternTestRow[];
        Sk?: IPatternTestRow[];
        Nonspacing_Mark?: IPatternTestRow[];
        Mn?: IPatternTestRow[];
        Number?: IPatternTestRow[];
        N?: IPatternTestRow[];
        Open_Punctuation?: IPatternTestRow[];
        Ps?: IPatternTestRow[];
        Other?: IPatternTestRow[];
        C?: IPatternTestRow[];
        Other_Letter?: IPatternTestRow[];
        Lo?: IPatternTestRow[];
        Other_Number?: IPatternTestRow[];
        No?: IPatternTestRow[];
        Other_Punctuation?: IPatternTestRow[];
        Po?: IPatternTestRow[];
        Other_Symbol?: IPatternTestRow[];
        So?: IPatternTestRow[];
        Paragraph_Separator?: IPatternTestRow[];
        Zp?: IPatternTestRow[];
        Private_Use?: IPatternTestRow[];
        Co?: IPatternTestRow[];
        Punctuation?: IPatternTestRow[];
        P?: IPatternTestRow[];
        punct?: IPatternTestRow[];
        Separator?: IPatternTestRow[];
        Z?: IPatternTestRow[];
        Space_Separator?: IPatternTestRow[];
        Zs?: IPatternTestRow[];
        Spacing_Mark?: IPatternTestRow[];
        Mc?: IPatternTestRow[];
        Surrogate?: IPatternTestRow[];
        Cs?: IPatternTestRow[];
        Symbol?: IPatternTestRow[];
        S?: IPatternTestRow[];
        Titlecase_Letter?: IPatternTestRow[];
        Lt?: IPatternTestRow[];
        Unassigned?: IPatternTestRow[];
        Cn?: IPatternTestRow[];
        Uppercase_Letter?: IPatternTestRow[];
        Lu?: IPatternTestRow[];
        ASCII?: IPatternTestRow[];
        ASCII_Hex_Digit?: IPatternTestRow[];
        AHex?: IPatternTestRow[];
        Alphabetic?: IPatternTestRow[];
        Any?: IPatternTestRow[];
        Assigned?: IPatternTestRow[];
        Bidi_Control?: IPatternTestRow[];
        Bidi_C?: IPatternTestRow[];
        Bidi_Mirrored?: IPatternTestRow[];
        Bidi_M?: IPatternTestRow[];
        Case_Ignorable?: IPatternTestRow[];
        CI?: IPatternTestRow[];
        Cased?: IPatternTestRow[];
        Changes_When_Casefolded?: IPatternTestRow[];
        CWCF?: IPatternTestRow[];
        Changes_When_Casemapped?: IPatternTestRow[];
        CWCM?: IPatternTestRow[];
        Changes_When_Lowercased?: IPatternTestRow[];
        CWL?: IPatternTestRow[];
        Changes_When_NFKC_Casefolded?: IPatternTestRow[];
        CWKCF?: IPatternTestRow[];
        Changes_When_Titlecased?: IPatternTestRow[];
        CWT?: IPatternTestRow[];
        Changes_When_Uppercased?: IPatternTestRow[];
        CWU?: IPatternTestRow[];
        Dash?: IPatternTestRow[];
        Default_Ignorable_Code_Point?: IPatternTestRow[];
        DI?: IPatternTestRow[];
        Deprecated?: IPatternTestRow[];
        Dep?: IPatternTestRow[];
        Diacritic?: IPatternTestRow[];
        Dia?: IPatternTestRow[];
        Emoji?: IPatternTestRow[];
        Emoji_Component?: IPatternTestRow[];
        Emoji_Modifier?: IPatternTestRow[];
        Emoji_Modifier_Base?: IPatternTestRow[];
        Emoji_Presentation?: IPatternTestRow[];
        Extender?: IPatternTestRow[];
        Ext?: IPatternTestRow[];
        Grapheme_Base?: IPatternTestRow[];
        Gr_Base?: IPatternTestRow[];
        Grapheme_Extend?: IPatternTestRow[];
        Gr_Ext?: IPatternTestRow[];
        Hex_Digit?: IPatternTestRow[];
        Hex?: IPatternTestRow[];
        IDS_Binary_Operator?: IPatternTestRow[];
        IDSB?: IPatternTestRow[];
        IDS_Trinary_Operator?: IPatternTestRow[];
        IDST?: IPatternTestRow[];
        ID_Continue?: IPatternTestRow[];
        IDC?: IPatternTestRow[];
        ID_Start?: IPatternTestRow[];
        IDS?: IPatternTestRow[];
        Ideo?: IPatternTestRow[];
        Join_Control?: IPatternTestRow[];
        Join_C?: IPatternTestRow[];
        Logical_Order_Exception?: IPatternTestRow[];
        LOE?: IPatternTestRow[];
        Lowercase?: IPatternTestRow[];
        Math?: IPatternTestRow[];
        Noncharacter_Code_Point?: IPatternTestRow[];
        NChar?: IPatternTestRow[];
        Pattern_Syntax?: IPatternTestRow[];
        Pat_Syn?: IPatternTestRow[];
        Pattern_White_Space?: IPatternTestRow[];
        Pat_WS?: IPatternTestRow[];
        Quotation_Mark?: IPatternTestRow[];
        QMark?: IPatternTestRow[];
        Radical?: IPatternTestRow[];
        Regional_Indicator?: IPatternTestRow[];
        RI?: IPatternTestRow[];
        Sentence_Terminal?: IPatternTestRow[];
        STerm?: IPatternTestRow[];
        Soft_Dotted?: IPatternTestRow[];
        SD?: IPatternTestRow[];
        Terminal_Punctuation?: IPatternTestRow[];
        Term?: IPatternTestRow[];
        UIdeo?: IPatternTestRow[];
        Uppercase?: IPatternTestRow[];
        Variation_Selector?: IPatternTestRow[];
        VS?: IPatternTestRow[];
        space?: IPatternTestRow[];
        XID_Continue?: IPatternTestRow[];
        XIDC?: IPatternTestRow[];
        XID_Start?: IPatternTestRow[];
        XIDS?: IPatternTestRow[];
    }): boolean;
};
export declare function testUnicode<T>(name: string, RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: typeof PatternTest): boolean;
export declare function testUnicodeAll<T>(RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: {
    White_Space?: IPatternTestRow[];
    Letter?: IPatternTestRow[];
    Lower?: IPatternTestRow[];
    Upper?: IPatternTestRow[];
    Alpha?: IPatternTestRow[];
    Digit?: IPatternTestRow[];
    Alnum?: IPatternTestRow[];
    Punct?: IPatternTestRow[];
    Graph?: IPatternTestRow[];
    Blank?: IPatternTestRow[];
    Cntrl?: IPatternTestRow[];
    XDigit?: IPatternTestRow[];
    Space?: IPatternTestRow[];
    Decimal_Digit_Number?: IPatternTestRow[];
    Ideographic?: IPatternTestRow[];
    Unified_Ideograph?: IPatternTestRow[];
    Cased_Letter?: IPatternTestRow[];
    LC?: IPatternTestRow[];
    Close_Punctuation?: IPatternTestRow[];
    Pe?: IPatternTestRow[];
    Connector_Punctuation?: IPatternTestRow[];
    Pc?: IPatternTestRow[];
    Control?: IPatternTestRow[];
    Cc?: IPatternTestRow[];
    cntrl?: IPatternTestRow[];
    Currency_Symbol?: IPatternTestRow[];
    Sc?: IPatternTestRow[];
    Dash_Punctuation?: IPatternTestRow[];
    Pd?: IPatternTestRow[];
    Decimal_Number?: IPatternTestRow[];
    Nd?: IPatternTestRow[];
    digit?: IPatternTestRow[];
    Enclosing_Mark?: IPatternTestRow[];
    Me?: IPatternTestRow[];
    Final_Punctuation?: IPatternTestRow[];
    Pf?: IPatternTestRow[];
    Format?: IPatternTestRow[];
    Cf?: IPatternTestRow[];
    Initial_Punctuation?: IPatternTestRow[];
    Pi?: IPatternTestRow[];
    L?: IPatternTestRow[];
    Letter_Number?: IPatternTestRow[];
    Nl?: IPatternTestRow[];
    Line_Separator?: IPatternTestRow[];
    Zl?: IPatternTestRow[];
    Lowercase_Letter?: IPatternTestRow[];
    Ll?: IPatternTestRow[];
    Mark?: IPatternTestRow[];
    M?: IPatternTestRow[];
    Combining_Mark?: IPatternTestRow[];
    Math_Symbol?: IPatternTestRow[];
    Sm?: IPatternTestRow[];
    Modifier_Letter?: IPatternTestRow[];
    Lm?: IPatternTestRow[];
    Modifier_Symbol?: IPatternTestRow[];
    Sk?: IPatternTestRow[];
    Nonspacing_Mark?: IPatternTestRow[];
    Mn?: IPatternTestRow[];
    Number?: IPatternTestRow[];
    N?: IPatternTestRow[];
    Open_Punctuation?: IPatternTestRow[];
    Ps?: IPatternTestRow[];
    Other?: IPatternTestRow[];
    C?: IPatternTestRow[];
    Other_Letter?: IPatternTestRow[];
    Lo?: IPatternTestRow[];
    Other_Number?: IPatternTestRow[];
    No?: IPatternTestRow[];
    Other_Punctuation?: IPatternTestRow[];
    Po?: IPatternTestRow[];
    Other_Symbol?: IPatternTestRow[];
    So?: IPatternTestRow[];
    Paragraph_Separator?: IPatternTestRow[];
    Zp?: IPatternTestRow[];
    Private_Use?: IPatternTestRow[];
    Co?: IPatternTestRow[];
    Punctuation?: IPatternTestRow[];
    P?: IPatternTestRow[];
    punct?: IPatternTestRow[];
    Separator?: IPatternTestRow[];
    Z?: IPatternTestRow[];
    Space_Separator?: IPatternTestRow[];
    Zs?: IPatternTestRow[];
    Spacing_Mark?: IPatternTestRow[];
    Mc?: IPatternTestRow[];
    Surrogate?: IPatternTestRow[];
    Cs?: IPatternTestRow[];
    Symbol?: IPatternTestRow[];
    S?: IPatternTestRow[];
    Titlecase_Letter?: IPatternTestRow[];
    Lt?: IPatternTestRow[];
    Unassigned?: IPatternTestRow[];
    Cn?: IPatternTestRow[];
    Uppercase_Letter?: IPatternTestRow[];
    Lu?: IPatternTestRow[];
    ASCII?: IPatternTestRow[];
    ASCII_Hex_Digit?: IPatternTestRow[];
    AHex?: IPatternTestRow[];
    Alphabetic?: IPatternTestRow[];
    Any?: IPatternTestRow[];
    Assigned?: IPatternTestRow[];
    Bidi_Control?: IPatternTestRow[];
    Bidi_C?: IPatternTestRow[];
    Bidi_Mirrored?: IPatternTestRow[];
    Bidi_M?: IPatternTestRow[];
    Case_Ignorable?: IPatternTestRow[];
    CI?: IPatternTestRow[];
    Cased?: IPatternTestRow[];
    Changes_When_Casefolded?: IPatternTestRow[];
    CWCF?: IPatternTestRow[];
    Changes_When_Casemapped?: IPatternTestRow[];
    CWCM?: IPatternTestRow[];
    Changes_When_Lowercased?: IPatternTestRow[];
    CWL?: IPatternTestRow[];
    Changes_When_NFKC_Casefolded?: IPatternTestRow[];
    CWKCF?: IPatternTestRow[];
    Changes_When_Titlecased?: IPatternTestRow[];
    CWT?: IPatternTestRow[];
    Changes_When_Uppercased?: IPatternTestRow[];
    CWU?: IPatternTestRow[];
    Dash?: IPatternTestRow[];
    Default_Ignorable_Code_Point?: IPatternTestRow[];
    DI?: IPatternTestRow[];
    Deprecated?: IPatternTestRow[];
    Dep?: IPatternTestRow[];
    Diacritic?: IPatternTestRow[];
    Dia?: IPatternTestRow[];
    Emoji?: IPatternTestRow[];
    Emoji_Component?: IPatternTestRow[];
    Emoji_Modifier?: IPatternTestRow[];
    Emoji_Modifier_Base?: IPatternTestRow[];
    Emoji_Presentation?: IPatternTestRow[];
    Extender?: IPatternTestRow[];
    Ext?: IPatternTestRow[];
    Grapheme_Base?: IPatternTestRow[];
    Gr_Base?: IPatternTestRow[];
    Grapheme_Extend?: IPatternTestRow[];
    Gr_Ext?: IPatternTestRow[];
    Hex_Digit?: IPatternTestRow[];
    Hex?: IPatternTestRow[];
    IDS_Binary_Operator?: IPatternTestRow[];
    IDSB?: IPatternTestRow[];
    IDS_Trinary_Operator?: IPatternTestRow[];
    IDST?: IPatternTestRow[];
    ID_Continue?: IPatternTestRow[];
    IDC?: IPatternTestRow[];
    ID_Start?: IPatternTestRow[];
    IDS?: IPatternTestRow[];
    Ideo?: IPatternTestRow[];
    Join_Control?: IPatternTestRow[];
    Join_C?: IPatternTestRow[];
    Logical_Order_Exception?: IPatternTestRow[];
    LOE?: IPatternTestRow[];
    Lowercase?: IPatternTestRow[];
    Math?: IPatternTestRow[];
    Noncharacter_Code_Point?: IPatternTestRow[];
    NChar?: IPatternTestRow[];
    Pattern_Syntax?: IPatternTestRow[];
    Pat_Syn?: IPatternTestRow[];
    Pattern_White_Space?: IPatternTestRow[];
    Pat_WS?: IPatternTestRow[];
    Quotation_Mark?: IPatternTestRow[];
    QMark?: IPatternTestRow[];
    Radical?: IPatternTestRow[];
    Regional_Indicator?: IPatternTestRow[];
    RI?: IPatternTestRow[];
    Sentence_Terminal?: IPatternTestRow[];
    STerm?: IPatternTestRow[];
    Soft_Dotted?: IPatternTestRow[];
    SD?: IPatternTestRow[];
    Terminal_Punctuation?: IPatternTestRow[];
    Term?: IPatternTestRow[];
    UIdeo?: IPatternTestRow[];
    Uppercase?: IPatternTestRow[];
    Variation_Selector?: IPatternTestRow[];
    VS?: IPatternTestRow[];
    space?: IPatternTestRow[];
    XID_Continue?: IPatternTestRow[];
    XIDC?: IPatternTestRow[];
    XID_Start?: IPatternTestRow[];
    XIDS?: IPatternTestRow[];
}): {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
    Cased_Letter: boolean;
    LC: boolean;
    Close_Punctuation: boolean;
    Pe: boolean;
    Connector_Punctuation: boolean;
    Pc: boolean;
    Control: boolean;
    Cc: boolean;
    cntrl: boolean;
    Currency_Symbol: boolean;
    Sc: boolean;
    Dash_Punctuation: boolean;
    Pd: boolean;
    Decimal_Number: boolean;
    Nd: boolean;
    digit: boolean;
    Enclosing_Mark: boolean;
    Me: boolean;
    Final_Punctuation: boolean;
    Pf: boolean;
    Format: boolean;
    Cf: boolean;
    Initial_Punctuation: boolean;
    Pi: boolean;
    L: boolean;
    Letter_Number: boolean;
    Nl: boolean;
    Line_Separator: boolean;
    Zl: boolean;
    Lowercase_Letter: boolean;
    Ll: boolean;
    Mark: boolean;
    M: boolean;
    Combining_Mark: boolean;
    Math_Symbol: boolean;
    Sm: boolean;
    Modifier_Letter: boolean;
    Lm: boolean;
    Modifier_Symbol: boolean;
    Sk: boolean;
    Nonspacing_Mark: boolean;
    Mn: boolean;
    Number: boolean;
    N: boolean;
    Open_Punctuation: boolean;
    Ps: boolean;
    Other: boolean;
    C: boolean;
    Other_Letter: boolean;
    Lo: boolean;
    Other_Number: boolean;
    No: boolean;
    Other_Punctuation: boolean;
    Po: boolean;
    Other_Symbol: boolean;
    So: boolean;
    Paragraph_Separator: boolean;
    Zp: boolean;
    Private_Use: boolean;
    Co: boolean;
    Punctuation: boolean;
    P: boolean;
    punct: boolean;
    Separator: boolean;
    Z: boolean;
    Space_Separator: boolean;
    Zs: boolean;
    Spacing_Mark: boolean;
    Mc: boolean;
    Surrogate: boolean;
    Cs: boolean;
    Symbol: boolean;
    S: boolean;
    Titlecase_Letter: boolean;
    Lt: boolean;
    Unassigned: boolean;
    Cn: boolean;
    Uppercase_Letter: boolean;
    Lu: boolean;
    ASCII: boolean;
    ASCII_Hex_Digit: boolean;
    AHex: boolean;
    Alphabetic: boolean;
    Any: boolean;
    Assigned: boolean;
    Bidi_Control: boolean;
    Bidi_C: boolean;
    Bidi_Mirrored: boolean;
    Bidi_M: boolean;
    Case_Ignorable: boolean;
    CI: boolean;
    Cased: boolean;
    Changes_When_Casefolded: boolean;
    CWCF: boolean;
    Changes_When_Casemapped: boolean;
    CWCM: boolean;
    Changes_When_Lowercased: boolean;
    CWL: boolean;
    Changes_When_NFKC_Casefolded: boolean;
    CWKCF: boolean;
    Changes_When_Titlecased: boolean;
    CWT: boolean;
    Changes_When_Uppercased: boolean;
    CWU: boolean;
    Dash: boolean;
    Default_Ignorable_Code_Point: boolean;
    DI: boolean;
    Deprecated: boolean;
    Dep: boolean;
    Diacritic: boolean;
    Dia: boolean;
    Emoji: boolean;
    Emoji_Component: boolean;
    Emoji_Modifier: boolean;
    Emoji_Modifier_Base: boolean;
    Emoji_Presentation: boolean;
    Extender: boolean;
    Ext: boolean;
    Grapheme_Base: boolean;
    Gr_Base: boolean;
    Grapheme_Extend: boolean;
    Gr_Ext: boolean;
    Hex_Digit: boolean;
    Hex: boolean;
    IDS_Binary_Operator: boolean;
    IDSB: boolean;
    IDS_Trinary_Operator: boolean;
    IDST: boolean;
    ID_Continue: boolean;
    IDC: boolean;
    ID_Start: boolean;
    IDS: boolean;
    Ideo: boolean;
    Join_Control: boolean;
    Join_C: boolean;
    Logical_Order_Exception: boolean;
    LOE: boolean;
    Lowercase: boolean;
    Math: boolean;
    Noncharacter_Code_Point: boolean;
    NChar: boolean;
    Pattern_Syntax: boolean;
    Pat_Syn: boolean;
    Pattern_White_Space: boolean;
    Pat_WS: boolean;
    Quotation_Mark: boolean;
    QMark: boolean;
    Radical: boolean;
    Regional_Indicator: boolean;
    RI: boolean;
    Sentence_Terminal: boolean;
    STerm: boolean;
    Soft_Dotted: boolean;
    SD: boolean;
    Terminal_Punctuation: boolean;
    Term: boolean;
    UIdeo: boolean;
    Uppercase: boolean;
    Variation_Selector: boolean;
    VS: boolean;
    space: boolean;
    XID_Continue: boolean;
    XIDC: boolean;
    XID_Start: boolean;
    XIDS: boolean;
};
export declare function wrapToRegexName(name: string, negation?: boolean): string;
declare const _default: typeof import("./unicode");
export default _default;
