{"version":3,"file":"pattern.js","sourceRoot":"","sources":["pattern.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/4/26/026.\n */\n\nimport { createRegExp, ICreateRegExp, ITypeCreateRegExp } from './index';\n\nexport const PatternSupport = {\n\tnamedCapturingGroups: false,\n\tnamedCapturingGroupsUnicode: false,\n\tnamedCapturingGroupsEmoji: false,\n\n\tnamedCapturingGroupsBackreference: false,\n\tnamedCapturingGroupsDuplicate: false,\n\n\tlookAheadPositive: false,\n\tlookAheadNegative: false,\n\n\tlookBehindPositive: false,\n\tlookBehindNegative: false,\n\n\tdotUnicodeEmoji: false,\n\n\tclassSub: false,\n\n\tunicodeWrap: false,\n};\n\nexport const PatternTest: {\n\t[k in keyof typeof PatternSupport]?: IPatternTestRow[]\n} = {\n\t/**\n\t * A-Z, a-z, 0-9, $, and _\n\t */\n\tnamedCapturingGroups: [\n\t\ttestNamedCapturingGroups('Az'),\n\t\ttestNamedCapturingGroups('_09'),\n\t\ttestNamedCapturingGroups('$'),\n\t],\n\tnamedCapturingGroupsUnicode: [\n\t\ttestNamedCapturingGroups('na√ØveÂ¨¢„ÅÆÊó•Â∏∏'),\n\t\ttestNamedCapturingGroups('–†—É—Å—Å–∫–∏–π'),\n\t\ttestNamedCapturingGroups('na√Øve'),\n\t\ttestNamedCapturingGroups('Â¨¢„ÅÆÊó•Â∏∏'),\n\t\ttestNamedCapturingGroups('†¨†', 'u'),\n\t],\n\tnamedCapturingGroupsEmoji: [\n\t\ttestNamedCapturingGroups('üë©', 'u'),\n\t],\n\n\tnamedCapturingGroupsBackreference: [\n\t\t['^(?<half>.*).\\\\k<half>$', 'u', 'a*a', true, 'test'],\n\t\t['^(?<half>.*).\\\\k<half>$', 'u', 'a*b', false, 'test'],\n\t],\n\n\tnamedCapturingGroupsDuplicate: [\n\t\t['^(?:(?<half>b)|(?<half>a)).\\\\k<half>$', 'u', 'a*a', true, 'test'],\n\t],\n\n\tlookAheadPositive: [\n\t\t['aa(?=bb)', '', 'aabb', true, 'test'],\n\t],\n\n\tlookAheadNegative: [\n\t\t['aa(?!bb)', '', 'aabb', false, 'test'],\n\t],\n\n\tlookBehindPositive: [\n\t\t['(?<=\\\\$)foo', 'g', '$foo %foo foo', '$ %foo foo', 'replace'],\n\t\t['(?<=\\\\$)foo', 'g', '$foo %foo foo', '$bar %foo foo', function <T>(r: RegExp, value: any, input: string, pattern: string, RegExpClass: ITypeCreateRegExp<T>, flag: string)\n\t\t{\n\t\t\treturn input.replace(r, 'bar') === value;\n\t\t}],\n\t],\n\n\tlookBehindNegative: [\n\t\t['(?<!\\\\$)foo', 'g', '$foo %foo foo', '$foo % ', 'replace'],\n\t\t['(?<!\\\\$)foo', 'g', '$foo %foo foo', '$foo %bar bar', function <T>(r: RegExp, value: any, input: string, pattern: string, RegExpClass: ITypeCreateRegExp<T>, flag: string)\n\t\t{\n\t\t\treturn input.replace(r, 'bar') === value;\n\t\t}],\n\t],\n\n\tdotUnicodeEmoji: [\n\n\t\t['^.$', 'u', 'üòÄ', true, 'test'],\n\n\t],\n\n\t/**\n\t * @link http://www.wellho.net/regex/javare.html\n\t */\n\tclassSub: [\n\t\t['[a-z&&[^m-p]]', '', 'm', false, 'test'],\n\t\t['[a-z&&[^m-p]]', '', 'a', true, 'test'],\n\t],\n\n\tunicodeWrap: [\n\t\t['^\\\\u{20bb7}$', 'u', '†Æ∑', true, 'test'],\n\t],\n};\n\nexport interface IPatternTestFn\n{\n\t<T>(r: RegExp, value: any, input: string, pattern: string, RegExpClass: ITypeCreateRegExp<T>, flag: string): boolean,\n}\n\nexport function testPattern(name: string, RegExpClass?: typeof RegExp, testPatterns?: typeof PatternTest): boolean\nexport function testPattern(name: string, RegExpClass?: ICreateRegExp, testPatterns?: typeof PatternTest): boolean\n// @ts-ignore\nexport function testPattern<T>(name: string, RegExpClass: ITypeCreateRegExp<T> = RegExp, testPatterns = PatternTest): boolean\n{\n\tif (testPatterns[name] && testPatterns[name].length)\n\t{\n\t\tlet bool: boolean = false;\n\n\t\ttry\n\t\t{\n\t\t\tbool = testPatterns[name].every(function (v)\n\t\t\t{\n\t\t\t\tlet [pattern, flag, input, value, fn] = v;\n\t\t\t\tlet bool: boolean;\n\n\t\t\t\tlet r = createRegExp(pattern, flag, RegExpClass);\n\n\t\t\t\tif (fn)\n\t\t\t\t{\n\t\t\t\t\tif (typeof fn == 'function')\n\t\t\t\t\t{\n\t\t\t\t\t\tbool = (fn as IPatternTestFn)(r, value, input, pattern, RegExpClass, flag);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlet ret;\n\n\t\t\t\t\t\tswitch (fn)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\t\tret = input.replace(r, '');\n\n\t\t\t\t\t\t\t\tbool = ret === value;\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tbool = r[fn](input) === value;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbool = r.exec(input) === value;\n\t\t\t\t}\n\n\t\t\t\t//console.log(bool);\n\n\t\t\t\treturn bool;\n\t\t\t}) === true;\n\n\t\t\t//console.log(bool);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tbool = false;\n\t\t}\n\n\t\treturn bool;\n\t}\n\n\treturn null;\n}\n\nexport function testNamedCapturingGroups(key: string, flags?: string): IPatternTestRow\n{\n\treturn [`U\\\\+(?<${key}>[0-9A-F]{4})`, flags || '', 'U+2620', {\n\t\tgroups: { [key]: '2620' },\n\t}, function (r, value, input)\n\t{\n\t\tlet ret = r.exec(input) as RegExpExecArray & {\n\t\t\tgroups: {\n\t\t\t\t[key: string]: string,\n\t\t\t}\n\t\t};\n\n\t\treturn ret.groups && Object\n\t\t\t.entries(ret.groups)\n\t\t\t.every(function (v)\n\t\t\t{\n\t\t\t\tlet [key, v1] = v;\n\t\t\t\tlet v2 = value.groups[key];\n\n\t\t\t\t//console.log(key, v1, v2, v1 === v2);\n\n\t\t\t\treturn v1 === v2;\n\t\t\t})\n\t\t\t;\n\t}];\n}\n\nexport interface IPatternTestRow\n{\n\t0: string,\n\t1: string,\n\t2: string,\n\t3: boolean | any,\n\t4?: string | IPatternTestFn,\n}\n"]}