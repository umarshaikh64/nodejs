"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isMergeableObject = require("is-mergeable-object");
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, optionsArgument, tmp) {
    let clone = !optionsArgument || optionsArgument.clone !== false;
    let bool = clone && _isMergeableObject(value, optionsArgument, tmp);
    let ret = (bool)
        ? deepmerge(emptyTarget(value), value, optionsArgument)
        : value;
    if (optionsArgument && optionsArgument.keyValueOrMode && !bool && tmp && ('key' in tmp)) {
        if (tmp.destination) {
            //console.log('destination', tmp.destination[tmp.key], ret, tmp.key);
            ret = tmp.destination[tmp.key] || ret;
        }
        if (tmp.target) {
            //console.log('target', tmp.target[tmp.key], ret, tmp.key);
            ret = tmp.target[tmp.key] || ret;
        }
        if (tmp.source) {
            //console.log('source', tmp.source[tmp.key], ret, tmp.key);
            ret = tmp.source[tmp.key] || ret;
        }
    }
    return ret;
}
function _isMergeableObject(value, optionsArgument, tmp) {
    let ret;
    if (optionsArgument && optionsArgument.isMergeableObject) {
        ret = optionsArgument.isMergeableObject(value, isMergeableObject, optionsArgument, tmp);
    }
    if (ret === null || typeof ret === 'undefined') {
        if (value && (typeof value[deepmerge.SYMBOL_IS_MERGEABLE] == 'boolean')) {
            ret = value[deepmerge.SYMBOL_IS_MERGEABLE];
        }
        else {
            ret = isMergeableObject(value);
        }
    }
    return ret;
}
function defaultArrayMerge(target, source, optionsArgument) {
    return target.concat(source).map(function (element, index, array) {
        return cloneUnlessOtherwiseSpecified(element, optionsArgument, {
            key: index,
        });
    });
}
function mergeObject(target, source, optionsArgument) {
    let destination = {};
    if (_isMergeableObject(target, optionsArgument)) {
        Object.keys(target).forEach(function (key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument, {
                key,
                source,
                target,
                destination,
            });
        });
    }
    Object.keys(source).forEach(function (key) {
        if (!_isMergeableObject(source[key], optionsArgument, {
            key,
            source,
            target,
        }) || !target[key]) {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument, {
                key,
                source,
                target,
            });
        }
        else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination;
}
function deepmerge(target, source, optionsArgument) {
    let sourceIsArray = Array.isArray(source);
    let targetIsArray = Array.isArray(target);
    let options = optionsArgument || { arrayMerge: defaultArrayMerge };
    let sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, optionsArgument, {
            target,
            source,
        });
    }
    else if (sourceIsArray) {
        let arrayMerge = options.arrayMerge || defaultArrayMerge;
        return arrayMerge(target, source, optionsArgument);
    }
    else {
        return mergeObject(target, source, optionsArgument);
    }
}
exports.deepmerge = deepmerge;
(function (deepmerge) {
    deepmerge.isMergeable = isMergeableObject;
    deepmerge.SYMBOL_IS_MERGEABLE = Symbol.for('SYMBOL_IS_MERGEABLE');
    deepmerge.all = function deepmergeAll(array, optionsArgument) {
        if (!Array.isArray(array)) {
            throw new Error('first argument should be an array');
        }
        // @ts-ignore
        return array.reduce(function (prev, next) {
            return deepmerge(prev, next, optionsArgument);
        }, {});
    };
})(deepmerge || (deepmerge = {}));
exports.deepmerge = deepmerge;
deepmerge.deepmerge = deepmerge;
deepmerge.default = deepmerge;
exports.default = deepmerge;
//# sourceMappingURL=data:application/json;base64,