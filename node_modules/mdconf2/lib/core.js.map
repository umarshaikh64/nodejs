{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2020/1/15.\n */\n\nimport { Token, Tokens, InlineLexer, TokensList } from 'marked';\nimport { ITokenText2, RawObject, IRawObjectDataPlus } from './RawObject';\nimport { IOptionsParse, defaultOptionsParse } from '../core';\n\nexport function getobjectbyid<T extends unknown>(a: string[], conf: object): T\n{\n\tlet ret = conf as any;\n\tfor (let i of a)\n\t{\n\t\tret = ret[i];\n\t}\n\treturn ret;\n}\n\nexport interface ITable\n{\n\theaders: Tokens.Table[\"header\"],\n\trows: Tokens.Table[\"cells\"],\n}\n\n/**\n * Add `str` to `obj` with the given `keys`\n * which represents the traversal path.\n *\n * @api private\n */\nexport function put(obj,\n\tkeys: string[],\n\tstr: string,\n\tcode?: boolean,\n\ttable?: ITable,\n\toptions: IOptionsParse = {},\n\tothers: {\n\t\ttype?: (Token | ITokenText2)[\"type\"],\n\t} = {},\n)\n{\n\tlet target = obj;\n\tlet last;\n\tlet key;\n\n\tfor (let i = 0; i < keys.length; i++)\n\t{\n\t\tkey = keys[i];\n\t\tlast = target;\n\t\ttarget[key] = target[key] || {};\n\t\ttarget = target[key];\n\t}\n\n\t// code\n\tif (code)\n\t{\n\t\tif (!Array.isArray(last[key])) last[key] = [];\n\t\tlast[key].push(str);\n\t\treturn;\n\t}\n\n\t// table\n\tif (table)\n\t{\n\t\tif (!Array.isArray(last[key])) last[key] = [];\n\t\tfor (let ri = 0; ri < table.rows.length; ri++)\n\t\t{\n\t\t\tlet arrItem = {} as Record<string, string>;\n\t\t\tfor (let hi = 0; hi < table.headers.length; hi++)\n\t\t\t{\n\t\t\t\tarrItem[normalize(table.headers[hi], options)] = table.rows[ri][hi];\n\t\t\t}\n\t\t\tlast[key].push(arrItem);\n\t\t}\n\t\treturn;\n\t}\n\n\tlet isKey: boolean;\n\tlet i: number = str.indexOf(':');\n\n\tif (options.filterObjectKey)\n\t{\n\t\tif (typeof options.filterObjectKey == 'function')\n\t\t{\n\t\t\tisKey = options.filterObjectKey(str, obj, others);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti = str.search(options.filterObjectKey);\n\t\t\tisKey = i != -1;\n\t\t}\n\t}\n\n\t// list\n\tif ((isKey === false || -1 == i || others.type == 'text2'))\n\t{\n\t\tif (!Array.isArray(last[key])) last[key] = [];\n\t\tlast[key].push(str.trim());\n\t\treturn;\n\t}\n\n\t// map\n\tkey = normalize(str.slice(0, i), options);\n\tlet val = str.slice(i + 1).trim();\n\ttarget[key] = val;\n}\n\n/**\n * Normalize `str`.\n */\n\nexport function normalize(str: string, options: IOptionsParse = {}): string\n{\n\tlet key = str.replace(/\\s+/g, ' ');\n\n\tif (!options.disableKeyToLowerCase)\n\t{\n\t\tkey = key.toLowerCase();\n\t}\n\n\treturn key.trim();\n}\n\nexport function makeCodeBlock(value, lang?: Tokens.Code[\"lang\"])\n{\n\treturn `\\n\\`\\`\\`${lang || ''}\\n${value}\\n\\`\\`\\`\\n`;\n}\n\nexport function createInlineLexer(toks: TokensList, options: IOptionsParse)\n{\n\tlet opts = Object.assign({}, defaultOptionsParse.markedOptions, options.markedOptions);\n\n\t// @ts-ignore\n\tlet inline = new InlineLexer(toks.links, opts);\n\n\treturn inline;\n}\n"]}