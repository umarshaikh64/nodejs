{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/3/17.\n */\n\nimport { vEncoding } from 'iconv-jschardet';\nimport fsExtra from 'fs-extra';\nimport { clone } from \"lodash\";\nimport iconv from 'iconv-jschardet';\nimport Bluebird from 'bluebird';\nimport stream from 'stream';\nimport { trimFilename } from './util';\nimport { ITSRequiredWith, ITSRequireAtLeastOne } from 'ts-type';\nimport { PassThrough } from 'stream';\n\nexport const SymFSLib = Symbol('fsLib');\n\nexport function WrapFSIconv<F extends typeof fsExtra = typeof fsExtra>(fsLib: F): WrapFSIconv.IWrapFS<F>\n{\n\tlet fs = clone(fsLib) as any as WrapFSIconv.IWrapFS<F>;\n\n\tObject.keys(fs)\n\t\t.forEach(k => {\n\t\t\tif (typeof fsLib[k] === 'function')\n\t\t\t{\n\t\t\t\tfs[k] = fsLib[k].bind(fsLib);\n\t\t\t}\n\t\t})\n\t;\n\n\tfs[SymFSLib] = fsLib;\n\n\tfs.iconv = iconv;\n\n\tfs.ensureWriteStream = ensureWriteStream.bind(fs);\n\tfs.saveFile = saveFile.bind(fs);\n\tfs.saveFileSync = saveFileSync.bind(fs);\n\n\tfs.loadFileSync = loadFileSync.bind(fs);\n\tfs.loadFile = loadFile.bind(fs);\n\n\tfs._createStreamPassThrough = _createStreamPassThrough.bind(fs);\n\tfs._outputStream = _outputStream.bind(fs);\n\tfs._autoDecode = _autoDecode.bind(fs);\n\n\tfs.trimFilename = trimFilename;\n\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\t// @ts-ignore\n\tfs.default = fs;\n\n\treturn fs;\n}\n\nexport function ensureWriteStream(file: string)\n{\n\t// @ts-ignore\n\tlet fs = (this as any as WrapFSIconv.IWrapFS)[SymFSLib] as typeof fsExtra;\n\n\tfs.ensureFileSync(file);\n\treturn fs.createWriteStream(file);\n}\n\nexport function saveFileSync(file: string, data, options: WrapFSIconv.IWrapFSIconvOptions = {})\n{\n\t// @ts-ignore\n\tlet fs = (this as any as WrapFSIconv.IWrapFS)[SymFSLib] as typeof fsExtra;\n\n\tfs.ensureFileSync(file);\n\n\tif (options.encoding)\n\t{\n\t\tdata = iconv.encode(data, options.encoding);\n\t}\n\n\tfs.outputFileSync(file, data);\n\n\treturn true;\n}\n\nexport function saveFile(file: string, data, options: WrapFSIconv.IWrapFSIconvOptions = {})\n{\n\t// @ts-ignore\n\tlet self: WrapFSIconv.IWrapFS<typeof fsExtra> = this;\n\tlet fs = self[SymFSLib] as typeof fsExtra;\n\n\treturn Bluebird\n\t\t.resolve(fs.ensureFile(file))\n\t\t.tap(function ()\n\t\t{\n\t\t\treturn new Bluebird(function (resolve, reject)\n\t\t\t{\n\t\t\t\tif (options.encoding)\n\t\t\t\t{\n\t\t\t\t\tdata = iconv.encode(data, options.encoding);\n\t\t\t\t}\n\n\t\t\t\tlet readStream = self._createStreamPassThrough(data);\n\t\t\t\tlet writeStream = self._outputStream(file, readStream);\n\n\t\t\t\twriteStream.on('error', reject);\n\t\t\t\twriteStream.on('finish', resolve);\n\t\t\t})\n\t\t})\n\t\t.thenReturn(true)\n\t\t;\n}\n\nexport declare namespace WrapFSIconv\n{\n\texport type IWrapFS<F extends typeof fsExtra = typeof fsExtra> = F &\n\t{\n\t\t[SymFSLib]: F | typeof fsExtra;\n\n\t\ticonv: typeof iconv;\n\t\tensureWriteStream(file: string): fsExtra.WriteStream;\n\n\t\t// --------------------\n\n\t\tsaveFile(file: string, data, options?: WrapFSIconv.IWrapFSIconvOptions): Bluebird<boolean>;\n\n\t\tsaveFileSync(file: string, data, options?: WrapFSIconv.IWrapFSIconvOptions): boolean\n\n\t\t// --------------------\n\n\t\tloadFile<T = string>(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile2): Bluebird<T>;\n\t\tloadFile<T = Buffer>(file: string, options?: WrapFSIconv.IWrapFSIconvOptionsLoadFile): Bluebird<T>;\n\n\t\tloadFileSync<T = string>(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile2): T;\n\t\tloadFileSync<T = Buffer>(file: string, options?: WrapFSIconv.IWrapFSIconvOptionsLoadFile): T;\n\n\t\t// --------------------\n\n\t\t_createStreamPassThrough(data: unknown): stream.Readable;\n\t\t_outputStream(file: string, readStream: stream.Readable): fsExtra.WriteStream;\n\n\t\t_autoDecode<T>(buf: T, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile & {\n\t\t\tautoDecode: true | string[];\n\t\t}): T | string | Buffer;\n\t\t_autoDecode(buf: unknown, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile): Buffer;\n\n\t\t// ----------\n\n\t\ttrimFilename(name: unknown): string\n\t}\n\n\texport interface IWrapFSIconvOptions\n\t{\n\t\tencoding?: vEncoding;\n\t}\n\n\texport interface IWrapFSIconvOptionsLoadFile\n\t{\n\t\tencoding?: string;\n\t\tflag?: string;\n\n\t\tautoDecode?: boolean | string[],\n\t}\n\n\texport type IWrapFSIconvOptionsLoadFile2 = ITSRequireAtLeastOne<IWrapFSIconvOptionsLoadFile, 'encoding' | 'autoDecode'>\n\n\texport type IEncoding = vEncoding\n}\n\nexport function _createStreamPassThrough(data): stream.Readable\n{\n\tlet readStream = new PassThrough();\n\treadStream.end(data);\n\treturn readStream;\n}\n\nexport function _outputStream(file: string, readStream: stream.Readable): fsExtra.WriteStream\n{\n\t// @ts-ignore\n\tlet fs = (this as any as WrapFSIconv.IWrapFS)[SymFSLib] as typeof fsExtra;\n\n\tlet writeStream = fs.createWriteStream(file);\n\treadStream.pipe(writeStream);\n\treturn writeStream;\n}\n\nexport function _autoDecode<T>(buf: T, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile & {\n\tautoDecode: true | string[],\n}): T | string | Buffer\nexport function _autoDecode(buf, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile): Buffer\nexport function _autoDecode(buf, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile): string | Buffer\n{\n\tif (Array.isArray(options.autoDecode))\n\t{\n\t\tlet _do: string;\n\t\tlet c = iconv._enc(iconv.detect(buf, true).name);\n\n\t\tfor (let from of (options.autoDecode as string[]))\n\t\t{\n\t\t\tlet cd = iconv.codec_data(from);\n\t\t\tlet key: string;\n\n\t\t\tif (cd && cd.name)\n\t\t\t{\n\t\t\t\tkey = iconv._enc(cd.name);\n\n\t\t\t\tif (c === key)\n\t\t\t\t{\n\t\t\t\t\t_do = key;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (_do)\n\t\t{\n\t\t\treturn iconv.encode(buf, null, options.encoding);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn buf;\n\t\t}\n\t}\n\n\treturn iconv.encode(buf);\n}\n\nexport function loadFile<T = string>(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile2): Bluebird<T>\nexport function loadFile<T = Buffer>(file: string, options?: WrapFSIconv.IWrapFSIconvOptionsLoadFile): Bluebird<T>\nexport function loadFile(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile = {}): Bluebird<Buffer | string>\n{\n\t// @ts-ignore\n\tlet self: WrapFSIconv.IWrapFS<typeof fsExtra> = this;\n\tlet fs = self[SymFSLib] as typeof fsExtra;\n\n\tlet ps: Promise<any>;\n\n\tif (options.encoding)\n\t{\n\t\tlet enc = iconv.isNodeEncoding(options.encoding);\n\n\t\tif (enc)\n\t\t{\n\t\t\tps = fs.readFile(file, options);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet ops: WrapFSIconv.IWrapFSIconvOptionsLoadFile = Object.assign({}, options);\n\t\t\tdelete ops.encoding;\n\n\t\t\tps = fs.readFile(file, ops)\n\t\t\t\t.then(function (buf)\n\t\t\t\t{\n\t\t\t\t\treturn iconv.decode(buf, options.encoding);\n\t\t\t\t})\n\t\t\t;\n\t\t}\n\t}\n\telse if (options.autoDecode)\n\t{\n\t\tps = fs.readFile(file, options)\n\t\t\t.then(function (buf)\n\t\t\t{\n\t\t\t\treturn self._autoDecode(buf, options);\n\t\t\t})\n\t\t;\n\t}\n\telse\n\t{\n\t\tps = fs.readFile(file, options);\n\t}\n\n\treturn Bluebird.resolve(ps);\n}\n\nexport function loadFileSync<T = string>(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile2): T\nexport function loadFileSync<T = Buffer>(file: string, options?: WrapFSIconv.IWrapFSIconvOptionsLoadFile): T\nexport function loadFileSync(file: string, options: WrapFSIconv.IWrapFSIconvOptionsLoadFile = {}): Buffer | string\n{\n\t// @ts-ignore\n\tlet self: WrapFSIconv.IWrapFS<typeof fsExtra> = this;\n\tlet fs = self[SymFSLib] as typeof fsExtra;\n\n\tlet ps;\n\n\tif (options.encoding)\n\t{\n\t\tlet enc = iconv.isNodeEncoding(options.encoding);\n\n\t\tif (enc)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tps = fs.readFileSync(file, options);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet ops: WrapFSIconv.IWrapFSIconvOptionsLoadFile = Object.assign({}, options);\n\t\t\tdelete ops.encoding;\n\n\t\t\t// @ts-ignore\n\t\t\tps = iconv.decode(fs.readFileSync(file, ops), options.encoding);\n\t\t}\n\t}\n\telse if (options.autoDecode)\n\t{\n\t\t// @ts-ignore\n\t\tps = self._autoDecode(fs.readFileSync(file, options), options);\n\t}\n\telse\n\t{\n\t\t// @ts-ignore\n\t\tps = fs.readFileSync(file, options);\n\t}\n\n\treturn ps;\n}\n\nexport default exports as typeof import('./core');\n"]}