{"version":3,"file":"encoding.js","sourceRoot":"","sources":["encoding.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,iEAA0C;AAC1C,uCAA6G;AAC7G,qCAA+C;AAE/C,8CAA4B;AAC5B,oBAAoB;AAEpB,SAAgB,cAAc,CAAC,QAAmB;IAEjD,IAAI,GAAG,GAAG,YAAI,CAAC,QAAQ,CAAC,CAAC;IACzB,OAAO,oBAAY,CAAC,QAAQ,CAAC,YAAI,CAAqB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AAC/E,CAAC;AAJD,wCAIC;AAED,IAAI,uBAAuB,GAAG,KAAK,CAAC;AAEpC,SAAgB,oBAAoB,CAAC,OAAgB,IAAI;IAExD,OAAO,uBAAuB,GAAG,IAAI,CAAC;AACvC,CAAC;AAHD,oDAGC;AAED,SAAgB,UAAU,CAAC,QAAmB;;IAE7C,IAAI,QAAQ,IAAI,IAAI,EACpB;QACC,MAAM,IAAI,KAAK,CAAC,aAAa,QAAQ,wBAAwB,CAAC,CAAC;KAC/D;IAED,IAAI,KAGH,CAAC;IACF,IAAI,GAAW,CAAC;IAChB,IAAI,IAAY,CAAC;IAEjB,IAAI,CAAC,mBAAW,CAAC,GAAG,GAAG,YAAI,CAAC,QAAQ,CAAC,CAAC,EACtC;QACC,IAAI,IAAI,GAAG,wBAAiB,CAAC,QAAQ,CAAC,CAAA;QAEtC,KAAK,SAAG,IAAI,CAAC,KAAK,mCAAI,KAAK,CAAC;QAC5B,IAAI,SAAG,IAAI,CAAC,IAAI,mCAAI,IAAI,CAAC;QACzB,GAAG,SAAG,IAAI,CAAC,GAAG,mCAAI,GAAG,CAAC;KACtB;IAED,IAAI,mBAAW,CAAC,GAAG,CAAC,EACpB;QACC,mBAAW,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,mBAAW,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC;QACnD,mBAAW,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,mBAAW,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC;QAEjD,mBAAW,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC;QAElC,OAAO,mBAAW,CAAC,GAAG,CAAC,CAAC;KACxB;IAED,IAAI,CAAC,uBAAuB,EAC5B;QACC,gBAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;KACzC;IAED,IAAI,IAAI,EACR;QACC,OAAO;YACN,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,IAAI;YAEV,KAAK,EAAE,QAAQ;YAEf,KAAK,EAAE,IAAI;YAEX,GAAG,EAAE,CAAC,KAAK;SACX,CAAC;KACF;SAED;QACC,OAAO,IAAI,CAAC;KACZ;AACF,CAAC;AAvDD,gCAuDC;AAED,kBAAe,OAAsC,CAAC","sourcesContent":["import iconvLite from 'iconv-lite';\nimport console from 'debug-color2/logger';\nimport { _enc, codec_table, ENUM_NODE_ENCODING, IEncodingCodec, NodeEncoding, vEncoding } from './lib/const';\nimport { getIconvLiteCodec } from './lib/util';\n\nexport * from './lib/const';\n//export { console }\n\nexport function isNodeEncoding(encoding: vEncoding): string\n{\n\tlet enc = _enc(encoding);\n\treturn NodeEncoding.includes(_enc<ENUM_NODE_ENCODING>(encoding)) ? enc : null;\n}\n\nlet DISABLE_CODEC_DATA_WARN = false;\n\nexport function disableCodecDataWarn(bool: boolean = true)\n{\n\treturn DISABLE_CODEC_DATA_WARN = bool;\n}\n\nexport function codec_data(encoding: vEncoding): IEncodingCodec\n{\n\tif (encoding == null)\n\t{\n\t\tthrow new Error(`encoding '${encoding}' is unknown or broken`);\n\t}\n\n\tlet codec: {\n\t\tencodingName?: string,\n\t\tenc?: string,\n\t};\n\tlet enc: string;\n\tlet enc2: string;\n\n\tif (!codec_table[enc = _enc(encoding)])\n\t{\n\t\tlet data = getIconvLiteCodec(encoding)\n\n\t\tcodec = data.codec ?? codec;\n\t\tenc2 = data.enc2 ?? enc2;\n\t\tenc = data.enc ?? enc;\n\t}\n\n\tif (codec_table[enc])\n\t{\n\t\tcodec_table[enc].key = codec_table[enc].key || enc;\n\t\tcodec_table[enc].id = codec_table[enc].id || enc;\n\n\t\tcodec_table[enc].input = encoding;\n\n\t\treturn codec_table[enc];\n\t}\n\n\tif (!DISABLE_CODEC_DATA_WARN)\n\t{\n\t\tconsole.warn(encoding, enc, enc2, codec);\n\t}\n\n\tif (enc2)\n\t{\n\t\treturn {\n\t\t\tkey: enc,\n\t\t\tkey2: enc2,\n\n\t\t\tinput: encoding,\n\n\t\t\terror: true,\n\n\t\t\tnot: !codec,\n\t\t};\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n}\n\nexport default exports as typeof import('./encoding');\n"]}