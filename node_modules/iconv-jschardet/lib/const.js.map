{"version":3,"file":"const.js","sourceRoot":"","sources":["const.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/3/21.\n */\n\nexport const enum CODEC_DATA_NAME\n{\n\tBIG5 = 'Big5',\n\tGBK = 'GBK',\n\tGB2312 = 'GB2312',\n\tUTF_16_LE = 'UTF-16LE',\n\tUTF_16_BE = 'UTF-16BE',\n\tEUC_JP = 'EUC-JP',\n\tSHIFT_JIS = 'SHIFT_JIS',\n\tASCII = 'ASCII',\n\tUTF_8 = 'UTF-8',\n\n\tUTF_32_LE = 'UTF-32LE',\n\tUTF_32_BE = 'UTF-32BE',\n}\n\nexport const enum CODEC_DATA_NAME_TO_UPPER_CASE\n{\n\tBIG5 = 'BIG5',\n\tGBK = 'GBK',\n\tGB2312 = 'GB2312',\n\tUTF_16_LE = 'UTF-16LE',\n\tUTF_16_BE = 'UTF-16BE',\n\tEUC_JP = 'EUC-JP',\n\tSHIFT_JIS = 'SHIFT_JIS',\n\tASCII = 'ASCII',\n\tUTF_8 = 'UTF-8',\n\n\tUTF_32_LE = 'UTF-32LE',\n\tUTF_32_BE = 'UTF-32BE',\n}\n\nexport const enum CODEC_DATA_ENCODING_ID\n{\n\tbig5hkscs = 'big5hkscs',\n\tcp936 = 'cp936',\n\tgbk = 'gbk',\n\teucjp = 'eucjp',\n\tshiftjis = 'shiftjis',\n\tutf8 = 'utf8',\n\tucs2 = 'ucs2',\n\tutf16be = 'utf16be',\n\tutf32be = 'utf32be',\n\tutf32le = 'utf32le',\n\n\t// ------------\n\n\tGBK = 'gbk',\n\n\tEUC_JP = 'eucjp',\n\n\tSHIFT_JIS = 'shiftjis',\n\n\tUTF_8 = 'utf8',\n\n\tUTF_16_BE = 'utf16be',\n\n\tUTF_32_LE = 'utf32le',\n\tUTF_32_BE = 'utf32be',\n\n\t// ----------\n\n\tascii = 'ascii',\n\tASCII = 'ASCII',\n}\n\nexport interface IEncodingCodec\n{\n\tkey?: CODEC_DATA_ENCODING_ID | string,\n\tkey2?: CODEC_DATA_ENCODING_ID | string,\n\n\tid?: CODEC_DATA_ENCODING_ID | string,\n\n\tname?: CODEC_DATA_NAME | string,\n\tinput?: EnumEncoding | string,\n\n\terror?: boolean,\n\tnot?: boolean,\n}\n\nexport interface IEncodingCodecTable\n{\n\t[CODEC_DATA_ENCODING_ID.big5hkscs]: IEncodingCodec & {\n\t\treadonly id: \"big5\";\n\t\treadonly name: CODEC_DATA_NAME.BIG5;\n\t};\n\t[CODEC_DATA_ENCODING_ID.cp936]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.GB2312;\n\t};\n\t[CODEC_DATA_ENCODING_ID.gbk]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.GBK;\n\t};\n\t[CODEC_DATA_ENCODING_ID.eucjp]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.EUC_JP;\n\t};\n\t[CODEC_DATA_ENCODING_ID.shiftjis]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.SHIFT_JIS;\n\t};\n\t[CODEC_DATA_ENCODING_ID.utf8]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.UTF_8;\n\t};\n\t[CODEC_DATA_ENCODING_ID.ucs2]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.UTF_16_LE;\n\t};\n\t[CODEC_DATA_ENCODING_ID.utf16be]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.UTF_16_BE;\n\t};\n\t[CODEC_DATA_ENCODING_ID.utf32be]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.UTF_32_BE;\n\t\treadonly not: true;\n\t};\n\t[CODEC_DATA_ENCODING_ID.utf32le]: IEncodingCodec & {\n\t\treadonly name: CODEC_DATA_NAME.UTF_32_LE;\n\t\treadonly not: true;\n\t};\n\n\t[key: string]: IEncodingCodec,\n}\n\nexport const enum ENUM_NODE_ENCODING\n{\n\tASCII = 'ascii',\n\n\tUTF8 = 'utf8',\n\tUTF_8 = 'utf-8',\n\n\tUTF16_LE = 'utf16le',\n\tUCS2 = 'ucs2',\n\n\tBASE64 = 'base64',\n\n\tLATIN1 = 'latin1',\n\tBINARY = 'binary',\n\n\tHEX = 'hex',\n}\n\nexport const NodeEncoding: ENUM_NODE_ENCODING[] = [\n\tENUM_NODE_ENCODING.ASCII,\n\n\tENUM_NODE_ENCODING.UTF8,\n\tENUM_NODE_ENCODING.UTF_8,\n\n\tENUM_NODE_ENCODING.UTF16_LE,\n\tENUM_NODE_ENCODING.UCS2,\n\n\tENUM_NODE_ENCODING.BASE64,\n\n\tENUM_NODE_ENCODING.LATIN1,\n\tENUM_NODE_ENCODING.BINARY,\n\n\tENUM_NODE_ENCODING.HEX,\n];\n\nexport const codec_table: IEncodingCodecTable = {\n\t[CODEC_DATA_ENCODING_ID.big5hkscs]: _codecTable({\n\t\tid: 'big5',\n\t\tname: CODEC_DATA_NAME.BIG5,\n\t} as const),\n\t[CODEC_DATA_ENCODING_ID.cp936]: _codecTable({\n\t\tname: CODEC_DATA_NAME.GB2312,\n\t} as const),\n\n\t[CODEC_DATA_ENCODING_ID.gbk]: _codecTable({\n\t\tname: CODEC_DATA_NAME.GBK,\n\t} as const),\n\n\t[CODEC_DATA_ENCODING_ID.eucjp]: _codecTable({\n\t\tname: CODEC_DATA_NAME.EUC_JP,\n\t} as const),\n\t[CODEC_DATA_ENCODING_ID.shiftjis]: _codecTable({\n\t\tname: CODEC_DATA_NAME.SHIFT_JIS,\n\t} as const),\n\n\t//------------------\n\n\t[CODEC_DATA_ENCODING_ID.utf8]: _codecTable({\n\t\tname: CODEC_DATA_NAME.UTF_8,\n\t} as const),\n\t[CODEC_DATA_ENCODING_ID.ucs2]: _codecTable({\n\t\tname: CODEC_DATA_NAME.UTF_16_LE,\n\t} as const),\n\n\t//------------------\n\n\t[CODEC_DATA_ENCODING_ID.utf16be]: _codecTable({\n\t\tname: CODEC_DATA_NAME.UTF_16_BE,\n\t} as const),\n\n\t/**\n\t * Error: Encoding not recognized: '' (searched as: '')\n\t */\n\t[CODEC_DATA_ENCODING_ID.utf32be]: _codecTable({\n\t\tname: CODEC_DATA_NAME.UTF_32_BE,\n\t\tnot: true,\n\t} as const),\n\t[CODEC_DATA_ENCODING_ID.utf32le]: _codecTable({\n\t\tname: CODEC_DATA_NAME.UTF_32_LE,\n\t\tnot: true,\n\t} as const),\n};\n\nexport enum EnumEncoding\n{\n\tBIG5 = 'Big5',\n\tUTF8 = 'UTF-8',\n\tGBK = 'Gbk',\n}\n\nexport type vNodeEncoding = string | null | ENUM_NODE_ENCODING | BufferEncoding;\nexport type vEncoding = string | null | EnumEncoding | ENUM_NODE_ENCODING | BufferEncoding;\n\nexport interface IDetectData\n{\n\tencoding: string,\n\tconfidence: number,\n\n\tname?: string,\n\tid?: CODEC_DATA_ENCODING_ID | string,\n}\n\nexport function codecDataNameToUpperCase<T extends keyof typeof CODEC_DATA_NAME_TO_UPPER_CASE>(key: (typeof CODEC_DATA_NAME_TO_UPPER_CASE | typeof CODEC_DATA_NAME)[T]): (typeof CODEC_DATA_NAME_TO_UPPER_CASE)[T]\nexport function codecDataNameToUpperCase(key: IDetectData[\"name\"]): CODEC_DATA_NAME_TO_UPPER_CASE | string\nexport function codecDataNameToUpperCase(key: IDetectData[\"name\"]): CODEC_DATA_NAME_TO_UPPER_CASE | string\n{\n\treturn key.toUpperCase()\n}\n\nexport function _codecTable<T extends Partial<IEncodingCodec>>(data: T): IEncodingCodec & T\n{\n\treturn data;\n}\n\n/**\n * 返回小寫標準化後的編碼 ID\n */\nexport function _enc(encoding: string | CODEC_DATA_NAME | CODEC_DATA_NAME_TO_UPPER_CASE | ENUM_NODE_ENCODING): CODEC_DATA_ENCODING_ID | string\n/**\n * 返回小寫標準化後的編碼 ID\n */\nexport function _enc<T extends CODEC_DATA_ENCODING_ID | string>(encoding: string | CODEC_DATA_NAME | CODEC_DATA_NAME_TO_UPPER_CASE | ENUM_NODE_ENCODING): T\nexport function _enc(encoding: string | CODEC_DATA_NAME | CODEC_DATA_NAME_TO_UPPER_CASE | ENUM_NODE_ENCODING): CODEC_DATA_ENCODING_ID | string\n{\n\tif (encoding == null)\n\t{\n\t\tthrow new Error(`encoding '${encoding}' is broken`);\n\t}\n\n\treturn encoding\n\t\t.toString()\n\t\t.toLowerCase()\n\t\t.replace(/[^0-9a-z]|:\\d{4}$/g, '')\n\t\t;\n}\n\nexport default exports as typeof import('./const');\n"]}